"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/zod";
exports.ids = ["vendor-chunks/zod"];
exports.modules = {

/***/ "(ssr)/./node_modules/zod/lib/index.mjs":
/*!****************************************!*\
  !*** ./node_modules/zod/lib/index.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BRAND: () => (/* binding */ BRAND),\n/* harmony export */   DIRTY: () => (/* binding */ DIRTY),\n/* harmony export */   EMPTY_PATH: () => (/* binding */ EMPTY_PATH),\n/* harmony export */   INVALID: () => (/* binding */ INVALID),\n/* harmony export */   NEVER: () => (/* binding */ NEVER),\n/* harmony export */   OK: () => (/* binding */ OK),\n/* harmony export */   ParseStatus: () => (/* binding */ ParseStatus),\n/* harmony export */   Schema: () => (/* binding */ ZodType),\n/* harmony export */   ZodAny: () => (/* binding */ ZodAny),\n/* harmony export */   ZodArray: () => (/* binding */ ZodArray),\n/* harmony export */   ZodBigInt: () => (/* binding */ ZodBigInt),\n/* harmony export */   ZodBoolean: () => (/* binding */ ZodBoolean),\n/* harmony export */   ZodBranded: () => (/* binding */ ZodBranded),\n/* harmony export */   ZodCatch: () => (/* binding */ ZodCatch),\n/* harmony export */   ZodDate: () => (/* binding */ ZodDate),\n/* harmony export */   ZodDefault: () => (/* binding */ ZodDefault),\n/* harmony export */   ZodDiscriminatedUnion: () => (/* binding */ ZodDiscriminatedUnion),\n/* harmony export */   ZodEffects: () => (/* binding */ ZodEffects),\n/* harmony export */   ZodEnum: () => (/* binding */ ZodEnum),\n/* harmony export */   ZodError: () => (/* binding */ ZodError),\n/* harmony export */   ZodFirstPartyTypeKind: () => (/* binding */ ZodFirstPartyTypeKind),\n/* harmony export */   ZodFunction: () => (/* binding */ ZodFunction),\n/* harmony export */   ZodIntersection: () => (/* binding */ ZodIntersection),\n/* harmony export */   ZodIssueCode: () => (/* binding */ ZodIssueCode),\n/* harmony export */   ZodLazy: () => (/* binding */ ZodLazy),\n/* harmony export */   ZodLiteral: () => (/* binding */ ZodLiteral),\n/* harmony export */   ZodMap: () => (/* binding */ ZodMap),\n/* harmony export */   ZodNaN: () => (/* binding */ ZodNaN),\n/* harmony export */   ZodNativeEnum: () => (/* binding */ ZodNativeEnum),\n/* harmony export */   ZodNever: () => (/* binding */ ZodNever),\n/* harmony export */   ZodNull: () => (/* binding */ ZodNull),\n/* harmony export */   ZodNullable: () => (/* binding */ ZodNullable),\n/* harmony export */   ZodNumber: () => (/* binding */ ZodNumber),\n/* harmony export */   ZodObject: () => (/* binding */ ZodObject),\n/* harmony export */   ZodOptional: () => (/* binding */ ZodOptional),\n/* harmony export */   ZodParsedType: () => (/* binding */ ZodParsedType),\n/* harmony export */   ZodPipeline: () => (/* binding */ ZodPipeline),\n/* harmony export */   ZodPromise: () => (/* binding */ ZodPromise),\n/* harmony export */   ZodReadonly: () => (/* binding */ ZodReadonly),\n/* harmony export */   ZodRecord: () => (/* binding */ ZodRecord),\n/* harmony export */   ZodSchema: () => (/* binding */ ZodType),\n/* harmony export */   ZodSet: () => (/* binding */ ZodSet),\n/* harmony export */   ZodString: () => (/* binding */ ZodString),\n/* harmony export */   ZodSymbol: () => (/* binding */ ZodSymbol),\n/* harmony export */   ZodTransformer: () => (/* binding */ ZodEffects),\n/* harmony export */   ZodTuple: () => (/* binding */ ZodTuple),\n/* harmony export */   ZodType: () => (/* binding */ ZodType),\n/* harmony export */   ZodUndefined: () => (/* binding */ ZodUndefined),\n/* harmony export */   ZodUnion: () => (/* binding */ ZodUnion),\n/* harmony export */   ZodUnknown: () => (/* binding */ ZodUnknown),\n/* harmony export */   ZodVoid: () => (/* binding */ ZodVoid),\n/* harmony export */   addIssueToContext: () => (/* binding */ addIssueToContext),\n/* harmony export */   any: () => (/* binding */ anyType),\n/* harmony export */   array: () => (/* binding */ arrayType),\n/* harmony export */   bigint: () => (/* binding */ bigIntType),\n/* harmony export */   boolean: () => (/* binding */ booleanType),\n/* harmony export */   coerce: () => (/* binding */ coerce),\n/* harmony export */   custom: () => (/* binding */ custom),\n/* harmony export */   date: () => (/* binding */ dateType),\n/* harmony export */   datetimeRegex: () => (/* binding */ datetimeRegex),\n/* harmony export */   \"default\": () => (/* binding */ z),\n/* harmony export */   defaultErrorMap: () => (/* binding */ errorMap),\n/* harmony export */   discriminatedUnion: () => (/* binding */ discriminatedUnionType),\n/* harmony export */   effect: () => (/* binding */ effectsType),\n/* harmony export */   \"enum\": () => (/* binding */ enumType),\n/* harmony export */   \"function\": () => (/* binding */ functionType),\n/* harmony export */   getErrorMap: () => (/* binding */ getErrorMap),\n/* harmony export */   getParsedType: () => (/* binding */ getParsedType),\n/* harmony export */   \"instanceof\": () => (/* binding */ instanceOfType),\n/* harmony export */   intersection: () => (/* binding */ intersectionType),\n/* harmony export */   isAborted: () => (/* binding */ isAborted),\n/* harmony export */   isAsync: () => (/* binding */ isAsync),\n/* harmony export */   isDirty: () => (/* binding */ isDirty),\n/* harmony export */   isValid: () => (/* binding */ isValid),\n/* harmony export */   late: () => (/* binding */ late),\n/* harmony export */   lazy: () => (/* binding */ lazyType),\n/* harmony export */   literal: () => (/* binding */ literalType),\n/* harmony export */   makeIssue: () => (/* binding */ makeIssue),\n/* harmony export */   map: () => (/* binding */ mapType),\n/* harmony export */   nan: () => (/* binding */ nanType),\n/* harmony export */   nativeEnum: () => (/* binding */ nativeEnumType),\n/* harmony export */   never: () => (/* binding */ neverType),\n/* harmony export */   \"null\": () => (/* binding */ nullType),\n/* harmony export */   nullable: () => (/* binding */ nullableType),\n/* harmony export */   number: () => (/* binding */ numberType),\n/* harmony export */   object: () => (/* binding */ objectType),\n/* harmony export */   objectUtil: () => (/* binding */ objectUtil),\n/* harmony export */   oboolean: () => (/* binding */ oboolean),\n/* harmony export */   onumber: () => (/* binding */ onumber),\n/* harmony export */   optional: () => (/* binding */ optionalType),\n/* harmony export */   ostring: () => (/* binding */ ostring),\n/* harmony export */   pipeline: () => (/* binding */ pipelineType),\n/* harmony export */   preprocess: () => (/* binding */ preprocessType),\n/* harmony export */   promise: () => (/* binding */ promiseType),\n/* harmony export */   quotelessJson: () => (/* binding */ quotelessJson),\n/* harmony export */   record: () => (/* binding */ recordType),\n/* harmony export */   set: () => (/* binding */ setType),\n/* harmony export */   setErrorMap: () => (/* binding */ setErrorMap),\n/* harmony export */   strictObject: () => (/* binding */ strictObjectType),\n/* harmony export */   string: () => (/* binding */ stringType),\n/* harmony export */   symbol: () => (/* binding */ symbolType),\n/* harmony export */   transformer: () => (/* binding */ effectsType),\n/* harmony export */   tuple: () => (/* binding */ tupleType),\n/* harmony export */   undefined: () => (/* binding */ undefinedType),\n/* harmony export */   union: () => (/* binding */ unionType),\n/* harmony export */   unknown: () => (/* binding */ unknownType),\n/* harmony export */   util: () => (/* binding */ util),\n/* harmony export */   \"void\": () => (/* binding */ voidType),\n/* harmony export */   z: () => (/* binding */ z)\n/* harmony export */ });\nvar util;\r\n(function (util) {\r\n    util.assertEqual = (val) => val;\r\n    function assertIs(_arg) { }\r\n    util.assertIs = assertIs;\r\n    function assertNever(_x) {\r\n        throw new Error();\r\n    }\r\n    util.assertNever = assertNever;\r\n    util.arrayToEnum = (items) => {\r\n        const obj = {};\r\n        for (const item of items) {\r\n            obj[item] = item;\r\n        }\r\n        return obj;\r\n    };\r\n    util.getValidEnumValues = (obj) => {\r\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\r\n        const filtered = {};\r\n        for (const k of validKeys) {\r\n            filtered[k] = obj[k];\r\n        }\r\n        return util.objectValues(filtered);\r\n    };\r\n    util.objectValues = (obj) => {\r\n        return util.objectKeys(obj).map(function (e) {\r\n            return obj[e];\r\n        });\r\n    };\r\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\r\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\r\n        : (object) => {\r\n            const keys = [];\r\n            for (const key in object) {\r\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\r\n                    keys.push(key);\r\n                }\r\n            }\r\n            return keys;\r\n        };\r\n    util.find = (arr, checker) => {\r\n        for (const item of arr) {\r\n            if (checker(item))\r\n                return item;\r\n        }\r\n        return undefined;\r\n    };\r\n    util.isInteger = typeof Number.isInteger === \"function\"\r\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\r\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\r\n    function joinValues(array, separator = \" | \") {\r\n        return array\r\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\r\n            .join(separator);\r\n    }\r\n    util.joinValues = joinValues;\r\n    util.jsonStringifyReplacer = (_, value) => {\r\n        if (typeof value === \"bigint\") {\r\n            return value.toString();\r\n        }\r\n        return value;\r\n    };\r\n})(util || (util = {}));\r\nvar objectUtil;\r\n(function (objectUtil) {\r\n    objectUtil.mergeShapes = (first, second) => {\r\n        return {\r\n            ...first,\r\n            ...second, // second overwrites first\r\n        };\r\n    };\r\n})(objectUtil || (objectUtil = {}));\r\nconst ZodParsedType = util.arrayToEnum([\r\n    \"string\",\r\n    \"nan\",\r\n    \"number\",\r\n    \"integer\",\r\n    \"float\",\r\n    \"boolean\",\r\n    \"date\",\r\n    \"bigint\",\r\n    \"symbol\",\r\n    \"function\",\r\n    \"undefined\",\r\n    \"null\",\r\n    \"array\",\r\n    \"object\",\r\n    \"unknown\",\r\n    \"promise\",\r\n    \"void\",\r\n    \"never\",\r\n    \"map\",\r\n    \"set\",\r\n]);\r\nconst getParsedType = (data) => {\r\n    const t = typeof data;\r\n    switch (t) {\r\n        case \"undefined\":\r\n            return ZodParsedType.undefined;\r\n        case \"string\":\r\n            return ZodParsedType.string;\r\n        case \"number\":\r\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\r\n        case \"boolean\":\r\n            return ZodParsedType.boolean;\r\n        case \"function\":\r\n            return ZodParsedType.function;\r\n        case \"bigint\":\r\n            return ZodParsedType.bigint;\r\n        case \"symbol\":\r\n            return ZodParsedType.symbol;\r\n        case \"object\":\r\n            if (Array.isArray(data)) {\r\n                return ZodParsedType.array;\r\n            }\r\n            if (data === null) {\r\n                return ZodParsedType.null;\r\n            }\r\n            if (data.then &&\r\n                typeof data.then === \"function\" &&\r\n                data.catch &&\r\n                typeof data.catch === \"function\") {\r\n                return ZodParsedType.promise;\r\n            }\r\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\r\n                return ZodParsedType.map;\r\n            }\r\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\r\n                return ZodParsedType.set;\r\n            }\r\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\r\n                return ZodParsedType.date;\r\n            }\r\n            return ZodParsedType.object;\r\n        default:\r\n            return ZodParsedType.unknown;\r\n    }\r\n};\r\n\r\nconst ZodIssueCode = util.arrayToEnum([\r\n    \"invalid_type\",\r\n    \"invalid_literal\",\r\n    \"custom\",\r\n    \"invalid_union\",\r\n    \"invalid_union_discriminator\",\r\n    \"invalid_enum_value\",\r\n    \"unrecognized_keys\",\r\n    \"invalid_arguments\",\r\n    \"invalid_return_type\",\r\n    \"invalid_date\",\r\n    \"invalid_string\",\r\n    \"too_small\",\r\n    \"too_big\",\r\n    \"invalid_intersection_types\",\r\n    \"not_multiple_of\",\r\n    \"not_finite\",\r\n]);\r\nconst quotelessJson = (obj) => {\r\n    const json = JSON.stringify(obj, null, 2);\r\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\r\n};\r\nclass ZodError extends Error {\r\n    constructor(issues) {\r\n        super();\r\n        this.issues = [];\r\n        this.addIssue = (sub) => {\r\n            this.issues = [...this.issues, sub];\r\n        };\r\n        this.addIssues = (subs = []) => {\r\n            this.issues = [...this.issues, ...subs];\r\n        };\r\n        const actualProto = new.target.prototype;\r\n        if (Object.setPrototypeOf) {\r\n            // eslint-disable-next-line ban/ban\r\n            Object.setPrototypeOf(this, actualProto);\r\n        }\r\n        else {\r\n            this.__proto__ = actualProto;\r\n        }\r\n        this.name = \"ZodError\";\r\n        this.issues = issues;\r\n    }\r\n    get errors() {\r\n        return this.issues;\r\n    }\r\n    format(_mapper) {\r\n        const mapper = _mapper ||\r\n            function (issue) {\r\n                return issue.message;\r\n            };\r\n        const fieldErrors = { _errors: [] };\r\n        const processError = (error) => {\r\n            for (const issue of error.issues) {\r\n                if (issue.code === \"invalid_union\") {\r\n                    issue.unionErrors.map(processError);\r\n                }\r\n                else if (issue.code === \"invalid_return_type\") {\r\n                    processError(issue.returnTypeError);\r\n                }\r\n                else if (issue.code === \"invalid_arguments\") {\r\n                    processError(issue.argumentsError);\r\n                }\r\n                else if (issue.path.length === 0) {\r\n                    fieldErrors._errors.push(mapper(issue));\r\n                }\r\n                else {\r\n                    let curr = fieldErrors;\r\n                    let i = 0;\r\n                    while (i < issue.path.length) {\r\n                        const el = issue.path[i];\r\n                        const terminal = i === issue.path.length - 1;\r\n                        if (!terminal) {\r\n                            curr[el] = curr[el] || { _errors: [] };\r\n                            // if (typeof el === \"string\") {\r\n                            //   curr[el] = curr[el] || { _errors: [] };\r\n                            // } else if (typeof el === \"number\") {\r\n                            //   const errorArray: any = [];\r\n                            //   errorArray._errors = [];\r\n                            //   curr[el] = curr[el] || errorArray;\r\n                            // }\r\n                        }\r\n                        else {\r\n                            curr[el] = curr[el] || { _errors: [] };\r\n                            curr[el]._errors.push(mapper(issue));\r\n                        }\r\n                        curr = curr[el];\r\n                        i++;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        processError(this);\r\n        return fieldErrors;\r\n    }\r\n    static assert(value) {\r\n        if (!(value instanceof ZodError)) {\r\n            throw new Error(`Not a ZodError: ${value}`);\r\n        }\r\n    }\r\n    toString() {\r\n        return this.message;\r\n    }\r\n    get message() {\r\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\r\n    }\r\n    get isEmpty() {\r\n        return this.issues.length === 0;\r\n    }\r\n    flatten(mapper = (issue) => issue.message) {\r\n        const fieldErrors = {};\r\n        const formErrors = [];\r\n        for (const sub of this.issues) {\r\n            if (sub.path.length > 0) {\r\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\r\n                fieldErrors[sub.path[0]].push(mapper(sub));\r\n            }\r\n            else {\r\n                formErrors.push(mapper(sub));\r\n            }\r\n        }\r\n        return { formErrors, fieldErrors };\r\n    }\r\n    get formErrors() {\r\n        return this.flatten();\r\n    }\r\n}\r\nZodError.create = (issues) => {\r\n    const error = new ZodError(issues);\r\n    return error;\r\n};\r\n\r\nconst errorMap = (issue, _ctx) => {\r\n    let message;\r\n    switch (issue.code) {\r\n        case ZodIssueCode.invalid_type:\r\n            if (issue.received === ZodParsedType.undefined) {\r\n                message = \"Required\";\r\n            }\r\n            else {\r\n                message = `Expected ${issue.expected}, received ${issue.received}`;\r\n            }\r\n            break;\r\n        case ZodIssueCode.invalid_literal:\r\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\r\n            break;\r\n        case ZodIssueCode.unrecognized_keys:\r\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\r\n            break;\r\n        case ZodIssueCode.invalid_union:\r\n            message = `Invalid input`;\r\n            break;\r\n        case ZodIssueCode.invalid_union_discriminator:\r\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\r\n            break;\r\n        case ZodIssueCode.invalid_enum_value:\r\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\r\n            break;\r\n        case ZodIssueCode.invalid_arguments:\r\n            message = `Invalid function arguments`;\r\n            break;\r\n        case ZodIssueCode.invalid_return_type:\r\n            message = `Invalid function return type`;\r\n            break;\r\n        case ZodIssueCode.invalid_date:\r\n            message = `Invalid date`;\r\n            break;\r\n        case ZodIssueCode.invalid_string:\r\n            if (typeof issue.validation === \"object\") {\r\n                if (\"includes\" in issue.validation) {\r\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\r\n                    if (typeof issue.validation.position === \"number\") {\r\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\r\n                    }\r\n                }\r\n                else if (\"startsWith\" in issue.validation) {\r\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\r\n                }\r\n                else if (\"endsWith\" in issue.validation) {\r\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\r\n                }\r\n                else {\r\n                    util.assertNever(issue.validation);\r\n                }\r\n            }\r\n            else if (issue.validation !== \"regex\") {\r\n                message = `Invalid ${issue.validation}`;\r\n            }\r\n            else {\r\n                message = \"Invalid\";\r\n            }\r\n            break;\r\n        case ZodIssueCode.too_small:\r\n            if (issue.type === \"array\")\r\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\r\n            else if (issue.type === \"string\")\r\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\r\n            else if (issue.type === \"number\")\r\n                message = `Number must be ${issue.exact\r\n                    ? `exactly equal to `\r\n                    : issue.inclusive\r\n                        ? `greater than or equal to `\r\n                        : `greater than `}${issue.minimum}`;\r\n            else if (issue.type === \"date\")\r\n                message = `Date must be ${issue.exact\r\n                    ? `exactly equal to `\r\n                    : issue.inclusive\r\n                        ? `greater than or equal to `\r\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\r\n            else\r\n                message = \"Invalid input\";\r\n            break;\r\n        case ZodIssueCode.too_big:\r\n            if (issue.type === \"array\")\r\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\r\n            else if (issue.type === \"string\")\r\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\r\n            else if (issue.type === \"number\")\r\n                message = `Number must be ${issue.exact\r\n                    ? `exactly`\r\n                    : issue.inclusive\r\n                        ? `less than or equal to`\r\n                        : `less than`} ${issue.maximum}`;\r\n            else if (issue.type === \"bigint\")\r\n                message = `BigInt must be ${issue.exact\r\n                    ? `exactly`\r\n                    : issue.inclusive\r\n                        ? `less than or equal to`\r\n                        : `less than`} ${issue.maximum}`;\r\n            else if (issue.type === \"date\")\r\n                message = `Date must be ${issue.exact\r\n                    ? `exactly`\r\n                    : issue.inclusive\r\n                        ? `smaller than or equal to`\r\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\r\n            else\r\n                message = \"Invalid input\";\r\n            break;\r\n        case ZodIssueCode.custom:\r\n            message = `Invalid input`;\r\n            break;\r\n        case ZodIssueCode.invalid_intersection_types:\r\n            message = `Intersection results could not be merged`;\r\n            break;\r\n        case ZodIssueCode.not_multiple_of:\r\n            message = `Number must be a multiple of ${issue.multipleOf}`;\r\n            break;\r\n        case ZodIssueCode.not_finite:\r\n            message = \"Number must be finite\";\r\n            break;\r\n        default:\r\n            message = _ctx.defaultError;\r\n            util.assertNever(issue);\r\n    }\r\n    return { message };\r\n};\r\n\r\nlet overrideErrorMap = errorMap;\r\nfunction setErrorMap(map) {\r\n    overrideErrorMap = map;\r\n}\r\nfunction getErrorMap() {\r\n    return overrideErrorMap;\r\n}\r\n\r\nconst makeIssue = (params) => {\r\n    const { data, path, errorMaps, issueData } = params;\r\n    const fullPath = [...path, ...(issueData.path || [])];\r\n    const fullIssue = {\r\n        ...issueData,\r\n        path: fullPath,\r\n    };\r\n    if (issueData.message !== undefined) {\r\n        return {\r\n            ...issueData,\r\n            path: fullPath,\r\n            message: issueData.message,\r\n        };\r\n    }\r\n    let errorMessage = \"\";\r\n    const maps = errorMaps\r\n        .filter((m) => !!m)\r\n        .slice()\r\n        .reverse();\r\n    for (const map of maps) {\r\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\r\n    }\r\n    return {\r\n        ...issueData,\r\n        path: fullPath,\r\n        message: errorMessage,\r\n    };\r\n};\r\nconst EMPTY_PATH = [];\r\nfunction addIssueToContext(ctx, issueData) {\r\n    const overrideMap = getErrorMap();\r\n    const issue = makeIssue({\r\n        issueData: issueData,\r\n        data: ctx.data,\r\n        path: ctx.path,\r\n        errorMaps: [\r\n            ctx.common.contextualErrorMap,\r\n            ctx.schemaErrorMap,\r\n            overrideMap,\r\n            overrideMap === errorMap ? undefined : errorMap, // then global default map\r\n        ].filter((x) => !!x),\r\n    });\r\n    ctx.common.issues.push(issue);\r\n}\r\nclass ParseStatus {\r\n    constructor() {\r\n        this.value = \"valid\";\r\n    }\r\n    dirty() {\r\n        if (this.value === \"valid\")\r\n            this.value = \"dirty\";\r\n    }\r\n    abort() {\r\n        if (this.value !== \"aborted\")\r\n            this.value = \"aborted\";\r\n    }\r\n    static mergeArray(status, results) {\r\n        const arrayValue = [];\r\n        for (const s of results) {\r\n            if (s.status === \"aborted\")\r\n                return INVALID;\r\n            if (s.status === \"dirty\")\r\n                status.dirty();\r\n            arrayValue.push(s.value);\r\n        }\r\n        return { status: status.value, value: arrayValue };\r\n    }\r\n    static async mergeObjectAsync(status, pairs) {\r\n        const syncPairs = [];\r\n        for (const pair of pairs) {\r\n            const key = await pair.key;\r\n            const value = await pair.value;\r\n            syncPairs.push({\r\n                key,\r\n                value,\r\n            });\r\n        }\r\n        return ParseStatus.mergeObjectSync(status, syncPairs);\r\n    }\r\n    static mergeObjectSync(status, pairs) {\r\n        const finalObject = {};\r\n        for (const pair of pairs) {\r\n            const { key, value } = pair;\r\n            if (key.status === \"aborted\")\r\n                return INVALID;\r\n            if (value.status === \"aborted\")\r\n                return INVALID;\r\n            if (key.status === \"dirty\")\r\n                status.dirty();\r\n            if (value.status === \"dirty\")\r\n                status.dirty();\r\n            if (key.value !== \"__proto__\" &&\r\n                (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\r\n                finalObject[key.value] = value.value;\r\n            }\r\n        }\r\n        return { status: status.value, value: finalObject };\r\n    }\r\n}\r\nconst INVALID = Object.freeze({\r\n    status: \"aborted\",\r\n});\r\nconst DIRTY = (value) => ({ status: \"dirty\", value });\r\nconst OK = (value) => ({ status: \"valid\", value });\r\nconst isAborted = (x) => x.status === \"aborted\";\r\nconst isDirty = (x) => x.status === \"dirty\";\r\nconst isValid = (x) => x.status === \"valid\";\r\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\r\n\r\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nvar errorUtil;\r\n(function (errorUtil) {\r\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\r\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\r\n})(errorUtil || (errorUtil = {}));\r\n\r\nvar _ZodEnum_cache, _ZodNativeEnum_cache;\r\nclass ParseInputLazyPath {\r\n    constructor(parent, value, path, key) {\r\n        this._cachedPath = [];\r\n        this.parent = parent;\r\n        this.data = value;\r\n        this._path = path;\r\n        this._key = key;\r\n    }\r\n    get path() {\r\n        if (!this._cachedPath.length) {\r\n            if (this._key instanceof Array) {\r\n                this._cachedPath.push(...this._path, ...this._key);\r\n            }\r\n            else {\r\n                this._cachedPath.push(...this._path, this._key);\r\n            }\r\n        }\r\n        return this._cachedPath;\r\n    }\r\n}\r\nconst handleResult = (ctx, result) => {\r\n    if (isValid(result)) {\r\n        return { success: true, data: result.value };\r\n    }\r\n    else {\r\n        if (!ctx.common.issues.length) {\r\n            throw new Error(\"Validation failed but no issues detected.\");\r\n        }\r\n        return {\r\n            success: false,\r\n            get error() {\r\n                if (this._error)\r\n                    return this._error;\r\n                const error = new ZodError(ctx.common.issues);\r\n                this._error = error;\r\n                return this._error;\r\n            },\r\n        };\r\n    }\r\n};\r\nfunction processCreateParams(params) {\r\n    if (!params)\r\n        return {};\r\n    const { errorMap, invalid_type_error, required_error, description } = params;\r\n    if (errorMap && (invalid_type_error || required_error)) {\r\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\r\n    }\r\n    if (errorMap)\r\n        return { errorMap: errorMap, description };\r\n    const customMap = (iss, ctx) => {\r\n        var _a, _b;\r\n        const { message } = params;\r\n        if (iss.code === \"invalid_enum_value\") {\r\n            return { message: message !== null && message !== void 0 ? message : ctx.defaultError };\r\n        }\r\n        if (typeof ctx.data === \"undefined\") {\r\n            return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };\r\n        }\r\n        if (iss.code !== \"invalid_type\")\r\n            return { message: ctx.defaultError };\r\n        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };\r\n    };\r\n    return { errorMap: customMap, description };\r\n}\r\nclass ZodType {\r\n    constructor(def) {\r\n        /** Alias of safeParseAsync */\r\n        this.spa = this.safeParseAsync;\r\n        this._def = def;\r\n        this.parse = this.parse.bind(this);\r\n        this.safeParse = this.safeParse.bind(this);\r\n        this.parseAsync = this.parseAsync.bind(this);\r\n        this.safeParseAsync = this.safeParseAsync.bind(this);\r\n        this.spa = this.spa.bind(this);\r\n        this.refine = this.refine.bind(this);\r\n        this.refinement = this.refinement.bind(this);\r\n        this.superRefine = this.superRefine.bind(this);\r\n        this.optional = this.optional.bind(this);\r\n        this.nullable = this.nullable.bind(this);\r\n        this.nullish = this.nullish.bind(this);\r\n        this.array = this.array.bind(this);\r\n        this.promise = this.promise.bind(this);\r\n        this.or = this.or.bind(this);\r\n        this.and = this.and.bind(this);\r\n        this.transform = this.transform.bind(this);\r\n        this.brand = this.brand.bind(this);\r\n        this.default = this.default.bind(this);\r\n        this.catch = this.catch.bind(this);\r\n        this.describe = this.describe.bind(this);\r\n        this.pipe = this.pipe.bind(this);\r\n        this.readonly = this.readonly.bind(this);\r\n        this.isNullable = this.isNullable.bind(this);\r\n        this.isOptional = this.isOptional.bind(this);\r\n    }\r\n    get description() {\r\n        return this._def.description;\r\n    }\r\n    _getType(input) {\r\n        return getParsedType(input.data);\r\n    }\r\n    _getOrReturnCtx(input, ctx) {\r\n        return (ctx || {\r\n            common: input.parent.common,\r\n            data: input.data,\r\n            parsedType: getParsedType(input.data),\r\n            schemaErrorMap: this._def.errorMap,\r\n            path: input.path,\r\n            parent: input.parent,\r\n        });\r\n    }\r\n    _processInputParams(input) {\r\n        return {\r\n            status: new ParseStatus(),\r\n            ctx: {\r\n                common: input.parent.common,\r\n                data: input.data,\r\n                parsedType: getParsedType(input.data),\r\n                schemaErrorMap: this._def.errorMap,\r\n                path: input.path,\r\n                parent: input.parent,\r\n            },\r\n        };\r\n    }\r\n    _parseSync(input) {\r\n        const result = this._parse(input);\r\n        if (isAsync(result)) {\r\n            throw new Error(\"Synchronous parse encountered promise.\");\r\n        }\r\n        return result;\r\n    }\r\n    _parseAsync(input) {\r\n        const result = this._parse(input);\r\n        return Promise.resolve(result);\r\n    }\r\n    parse(data, params) {\r\n        const result = this.safeParse(data, params);\r\n        if (result.success)\r\n            return result.data;\r\n        throw result.error;\r\n    }\r\n    safeParse(data, params) {\r\n        var _a;\r\n        const ctx = {\r\n            common: {\r\n                issues: [],\r\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\r\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\r\n            },\r\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\r\n            schemaErrorMap: this._def.errorMap,\r\n            parent: null,\r\n            data,\r\n            parsedType: getParsedType(data),\r\n        };\r\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\r\n        return handleResult(ctx, result);\r\n    }\r\n    async parseAsync(data, params) {\r\n        const result = await this.safeParseAsync(data, params);\r\n        if (result.success)\r\n            return result.data;\r\n        throw result.error;\r\n    }\r\n    async safeParseAsync(data, params) {\r\n        const ctx = {\r\n            common: {\r\n                issues: [],\r\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\r\n                async: true,\r\n            },\r\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\r\n            schemaErrorMap: this._def.errorMap,\r\n            parent: null,\r\n            data,\r\n            parsedType: getParsedType(data),\r\n        };\r\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\r\n        const result = await (isAsync(maybeAsyncResult)\r\n            ? maybeAsyncResult\r\n            : Promise.resolve(maybeAsyncResult));\r\n        return handleResult(ctx, result);\r\n    }\r\n    refine(check, message) {\r\n        const getIssueProperties = (val) => {\r\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\r\n                return { message };\r\n            }\r\n            else if (typeof message === \"function\") {\r\n                return message(val);\r\n            }\r\n            else {\r\n                return message;\r\n            }\r\n        };\r\n        return this._refinement((val, ctx) => {\r\n            const result = check(val);\r\n            const setError = () => ctx.addIssue({\r\n                code: ZodIssueCode.custom,\r\n                ...getIssueProperties(val),\r\n            });\r\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\r\n                return result.then((data) => {\r\n                    if (!data) {\r\n                        setError();\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        return true;\r\n                    }\r\n                });\r\n            }\r\n            if (!result) {\r\n                setError();\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n    refinement(check, refinementData) {\r\n        return this._refinement((val, ctx) => {\r\n            if (!check(val)) {\r\n                ctx.addIssue(typeof refinementData === \"function\"\r\n                    ? refinementData(val, ctx)\r\n                    : refinementData);\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n    _refinement(refinement) {\r\n        return new ZodEffects({\r\n            schema: this,\r\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\r\n            effect: { type: \"refinement\", refinement },\r\n        });\r\n    }\r\n    superRefine(refinement) {\r\n        return this._refinement(refinement);\r\n    }\r\n    optional() {\r\n        return ZodOptional.create(this, this._def);\r\n    }\r\n    nullable() {\r\n        return ZodNullable.create(this, this._def);\r\n    }\r\n    nullish() {\r\n        return this.nullable().optional();\r\n    }\r\n    array() {\r\n        return ZodArray.create(this, this._def);\r\n    }\r\n    promise() {\r\n        return ZodPromise.create(this, this._def);\r\n    }\r\n    or(option) {\r\n        return ZodUnion.create([this, option], this._def);\r\n    }\r\n    and(incoming) {\r\n        return ZodIntersection.create(this, incoming, this._def);\r\n    }\r\n    transform(transform) {\r\n        return new ZodEffects({\r\n            ...processCreateParams(this._def),\r\n            schema: this,\r\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\r\n            effect: { type: \"transform\", transform },\r\n        });\r\n    }\r\n    default(def) {\r\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\r\n        return new ZodDefault({\r\n            ...processCreateParams(this._def),\r\n            innerType: this,\r\n            defaultValue: defaultValueFunc,\r\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\r\n        });\r\n    }\r\n    brand() {\r\n        return new ZodBranded({\r\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\r\n            type: this,\r\n            ...processCreateParams(this._def),\r\n        });\r\n    }\r\n    catch(def) {\r\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\r\n        return new ZodCatch({\r\n            ...processCreateParams(this._def),\r\n            innerType: this,\r\n            catchValue: catchValueFunc,\r\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\r\n        });\r\n    }\r\n    describe(description) {\r\n        const This = this.constructor;\r\n        return new This({\r\n            ...this._def,\r\n            description,\r\n        });\r\n    }\r\n    pipe(target) {\r\n        return ZodPipeline.create(this, target);\r\n    }\r\n    readonly() {\r\n        return ZodReadonly.create(this);\r\n    }\r\n    isOptional() {\r\n        return this.safeParse(undefined).success;\r\n    }\r\n    isNullable() {\r\n        return this.safeParse(null).success;\r\n    }\r\n}\r\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\r\nconst cuid2Regex = /^[0-9a-z]+$/;\r\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;\r\n// const uuidRegex =\r\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\r\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\r\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\r\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\r\n// from https://stackoverflow.com/a/46181/1550155\r\n// old version: too slow, didn't support unicode\r\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\r\n//old email regex\r\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\r\n// eslint-disable-next-line\r\n// const emailRegex =\r\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\r\n// const emailRegex =\r\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\r\n// const emailRegex =\r\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\r\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\r\n// const emailRegex =\r\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\r\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\r\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\r\nlet emojiRegex;\r\n// faster, simpler, safer\r\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\r\nconst ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\r\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\r\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\r\n// simple\r\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\r\n// no leap year validation\r\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\r\n// with leap year validation\r\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\r\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\r\nfunction timeRegexSource(args) {\r\n    // let regex = `\\\\d{2}:\\\\d{2}:\\\\d{2}`;\r\n    let regex = `([01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d`;\r\n    if (args.precision) {\r\n        regex = `${regex}\\\\.\\\\d{${args.precision}}`;\r\n    }\r\n    else if (args.precision == null) {\r\n        regex = `${regex}(\\\\.\\\\d+)?`;\r\n    }\r\n    return regex;\r\n}\r\nfunction timeRegex(args) {\r\n    return new RegExp(`^${timeRegexSource(args)}$`);\r\n}\r\n// Adapted from https://stackoverflow.com/a/3143231\r\nfunction datetimeRegex(args) {\r\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\r\n    const opts = [];\r\n    opts.push(args.local ? `Z?` : `Z`);\r\n    if (args.offset)\r\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\r\n    regex = `${regex}(${opts.join(\"|\")})`;\r\n    return new RegExp(`^${regex}$`);\r\n}\r\nfunction isValidIP(ip, version) {\r\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\r\n        return true;\r\n    }\r\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nclass ZodString extends ZodType {\r\n    _parse(input) {\r\n        if (this._def.coerce) {\r\n            input.data = String(input.data);\r\n        }\r\n        const parsedType = this._getType(input);\r\n        if (parsedType !== ZodParsedType.string) {\r\n            const ctx = this._getOrReturnCtx(input);\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.string,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        const status = new ParseStatus();\r\n        let ctx = undefined;\r\n        for (const check of this._def.checks) {\r\n            if (check.kind === \"min\") {\r\n                if (input.data.length < check.value) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.too_small,\r\n                        minimum: check.value,\r\n                        type: \"string\",\r\n                        inclusive: true,\r\n                        exact: false,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"max\") {\r\n                if (input.data.length > check.value) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.too_big,\r\n                        maximum: check.value,\r\n                        type: \"string\",\r\n                        inclusive: true,\r\n                        exact: false,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"length\") {\r\n                const tooBig = input.data.length > check.value;\r\n                const tooSmall = input.data.length < check.value;\r\n                if (tooBig || tooSmall) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    if (tooBig) {\r\n                        addIssueToContext(ctx, {\r\n                            code: ZodIssueCode.too_big,\r\n                            maximum: check.value,\r\n                            type: \"string\",\r\n                            inclusive: true,\r\n                            exact: true,\r\n                            message: check.message,\r\n                        });\r\n                    }\r\n                    else if (tooSmall) {\r\n                        addIssueToContext(ctx, {\r\n                            code: ZodIssueCode.too_small,\r\n                            minimum: check.value,\r\n                            type: \"string\",\r\n                            inclusive: true,\r\n                            exact: true,\r\n                            message: check.message,\r\n                        });\r\n                    }\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"email\") {\r\n                if (!emailRegex.test(input.data)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        validation: \"email\",\r\n                        code: ZodIssueCode.invalid_string,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"emoji\") {\r\n                if (!emojiRegex) {\r\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\r\n                }\r\n                if (!emojiRegex.test(input.data)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        validation: \"emoji\",\r\n                        code: ZodIssueCode.invalid_string,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"uuid\") {\r\n                if (!uuidRegex.test(input.data)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        validation: \"uuid\",\r\n                        code: ZodIssueCode.invalid_string,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"nanoid\") {\r\n                if (!nanoidRegex.test(input.data)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        validation: \"nanoid\",\r\n                        code: ZodIssueCode.invalid_string,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"cuid\") {\r\n                if (!cuidRegex.test(input.data)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        validation: \"cuid\",\r\n                        code: ZodIssueCode.invalid_string,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"cuid2\") {\r\n                if (!cuid2Regex.test(input.data)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        validation: \"cuid2\",\r\n                        code: ZodIssueCode.invalid_string,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"ulid\") {\r\n                if (!ulidRegex.test(input.data)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        validation: \"ulid\",\r\n                        code: ZodIssueCode.invalid_string,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"url\") {\r\n                try {\r\n                    new URL(input.data);\r\n                }\r\n                catch (_a) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        validation: \"url\",\r\n                        code: ZodIssueCode.invalid_string,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"regex\") {\r\n                check.regex.lastIndex = 0;\r\n                const testResult = check.regex.test(input.data);\r\n                if (!testResult) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        validation: \"regex\",\r\n                        code: ZodIssueCode.invalid_string,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"trim\") {\r\n                input.data = input.data.trim();\r\n            }\r\n            else if (check.kind === \"includes\") {\r\n                if (!input.data.includes(check.value, check.position)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.invalid_string,\r\n                        validation: { includes: check.value, position: check.position },\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"toLowerCase\") {\r\n                input.data = input.data.toLowerCase();\r\n            }\r\n            else if (check.kind === \"toUpperCase\") {\r\n                input.data = input.data.toUpperCase();\r\n            }\r\n            else if (check.kind === \"startsWith\") {\r\n                if (!input.data.startsWith(check.value)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.invalid_string,\r\n                        validation: { startsWith: check.value },\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"endsWith\") {\r\n                if (!input.data.endsWith(check.value)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.invalid_string,\r\n                        validation: { endsWith: check.value },\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"datetime\") {\r\n                const regex = datetimeRegex(check);\r\n                if (!regex.test(input.data)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.invalid_string,\r\n                        validation: \"datetime\",\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"date\") {\r\n                const regex = dateRegex;\r\n                if (!regex.test(input.data)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.invalid_string,\r\n                        validation: \"date\",\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"time\") {\r\n                const regex = timeRegex(check);\r\n                if (!regex.test(input.data)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.invalid_string,\r\n                        validation: \"time\",\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"duration\") {\r\n                if (!durationRegex.test(input.data)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        validation: \"duration\",\r\n                        code: ZodIssueCode.invalid_string,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"ip\") {\r\n                if (!isValidIP(input.data, check.version)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        validation: \"ip\",\r\n                        code: ZodIssueCode.invalid_string,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"base64\") {\r\n                if (!base64Regex.test(input.data)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        validation: \"base64\",\r\n                        code: ZodIssueCode.invalid_string,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else {\r\n                util.assertNever(check);\r\n            }\r\n        }\r\n        return { status: status.value, value: input.data };\r\n    }\r\n    _regex(regex, validation, message) {\r\n        return this.refinement((data) => regex.test(data), {\r\n            validation,\r\n            code: ZodIssueCode.invalid_string,\r\n            ...errorUtil.errToObj(message),\r\n        });\r\n    }\r\n    _addCheck(check) {\r\n        return new ZodString({\r\n            ...this._def,\r\n            checks: [...this._def.checks, check],\r\n        });\r\n    }\r\n    email(message) {\r\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\r\n    }\r\n    url(message) {\r\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\r\n    }\r\n    emoji(message) {\r\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\r\n    }\r\n    uuid(message) {\r\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\r\n    }\r\n    nanoid(message) {\r\n        return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\r\n    }\r\n    cuid(message) {\r\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\r\n    }\r\n    cuid2(message) {\r\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\r\n    }\r\n    ulid(message) {\r\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\r\n    }\r\n    base64(message) {\r\n        return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\r\n    }\r\n    ip(options) {\r\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\r\n    }\r\n    datetime(options) {\r\n        var _a, _b;\r\n        if (typeof options === \"string\") {\r\n            return this._addCheck({\r\n                kind: \"datetime\",\r\n                precision: null,\r\n                offset: false,\r\n                local: false,\r\n                message: options,\r\n            });\r\n        }\r\n        return this._addCheck({\r\n            kind: \"datetime\",\r\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\r\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\r\n            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\r\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\r\n        });\r\n    }\r\n    date(message) {\r\n        return this._addCheck({ kind: \"date\", message });\r\n    }\r\n    time(options) {\r\n        if (typeof options === \"string\") {\r\n            return this._addCheck({\r\n                kind: \"time\",\r\n                precision: null,\r\n                message: options,\r\n            });\r\n        }\r\n        return this._addCheck({\r\n            kind: \"time\",\r\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\r\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\r\n        });\r\n    }\r\n    duration(message) {\r\n        return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\r\n    }\r\n    regex(regex, message) {\r\n        return this._addCheck({\r\n            kind: \"regex\",\r\n            regex: regex,\r\n            ...errorUtil.errToObj(message),\r\n        });\r\n    }\r\n    includes(value, options) {\r\n        return this._addCheck({\r\n            kind: \"includes\",\r\n            value: value,\r\n            position: options === null || options === void 0 ? void 0 : options.position,\r\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\r\n        });\r\n    }\r\n    startsWith(value, message) {\r\n        return this._addCheck({\r\n            kind: \"startsWith\",\r\n            value: value,\r\n            ...errorUtil.errToObj(message),\r\n        });\r\n    }\r\n    endsWith(value, message) {\r\n        return this._addCheck({\r\n            kind: \"endsWith\",\r\n            value: value,\r\n            ...errorUtil.errToObj(message),\r\n        });\r\n    }\r\n    min(minLength, message) {\r\n        return this._addCheck({\r\n            kind: \"min\",\r\n            value: minLength,\r\n            ...errorUtil.errToObj(message),\r\n        });\r\n    }\r\n    max(maxLength, message) {\r\n        return this._addCheck({\r\n            kind: \"max\",\r\n            value: maxLength,\r\n            ...errorUtil.errToObj(message),\r\n        });\r\n    }\r\n    length(len, message) {\r\n        return this._addCheck({\r\n            kind: \"length\",\r\n            value: len,\r\n            ...errorUtil.errToObj(message),\r\n        });\r\n    }\r\n    /**\r\n     * @deprecated Use z.string().min(1) instead.\r\n     * @see {@link ZodString.min}\r\n     */\r\n    nonempty(message) {\r\n        return this.min(1, errorUtil.errToObj(message));\r\n    }\r\n    trim() {\r\n        return new ZodString({\r\n            ...this._def,\r\n            checks: [...this._def.checks, { kind: \"trim\" }],\r\n        });\r\n    }\r\n    toLowerCase() {\r\n        return new ZodString({\r\n            ...this._def,\r\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\r\n        });\r\n    }\r\n    toUpperCase() {\r\n        return new ZodString({\r\n            ...this._def,\r\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\r\n        });\r\n    }\r\n    get isDatetime() {\r\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\r\n    }\r\n    get isDate() {\r\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\r\n    }\r\n    get isTime() {\r\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\r\n    }\r\n    get isDuration() {\r\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\r\n    }\r\n    get isEmail() {\r\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\r\n    }\r\n    get isURL() {\r\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\r\n    }\r\n    get isEmoji() {\r\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\r\n    }\r\n    get isUUID() {\r\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\r\n    }\r\n    get isNANOID() {\r\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\r\n    }\r\n    get isCUID() {\r\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\r\n    }\r\n    get isCUID2() {\r\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\r\n    }\r\n    get isULID() {\r\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\r\n    }\r\n    get isIP() {\r\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\r\n    }\r\n    get isBase64() {\r\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\r\n    }\r\n    get minLength() {\r\n        let min = null;\r\n        for (const ch of this._def.checks) {\r\n            if (ch.kind === \"min\") {\r\n                if (min === null || ch.value > min)\r\n                    min = ch.value;\r\n            }\r\n        }\r\n        return min;\r\n    }\r\n    get maxLength() {\r\n        let max = null;\r\n        for (const ch of this._def.checks) {\r\n            if (ch.kind === \"max\") {\r\n                if (max === null || ch.value < max)\r\n                    max = ch.value;\r\n            }\r\n        }\r\n        return max;\r\n    }\r\n}\r\nZodString.create = (params) => {\r\n    var _a;\r\n    return new ZodString({\r\n        checks: [],\r\n        typeName: ZodFirstPartyTypeKind.ZodString,\r\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\r\nfunction floatSafeRemainder(val, step) {\r\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\r\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\r\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\r\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\r\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\r\n    return (valInt % stepInt) / Math.pow(10, decCount);\r\n}\r\nclass ZodNumber extends ZodType {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.min = this.gte;\r\n        this.max = this.lte;\r\n        this.step = this.multipleOf;\r\n    }\r\n    _parse(input) {\r\n        if (this._def.coerce) {\r\n            input.data = Number(input.data);\r\n        }\r\n        const parsedType = this._getType(input);\r\n        if (parsedType !== ZodParsedType.number) {\r\n            const ctx = this._getOrReturnCtx(input);\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.number,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        let ctx = undefined;\r\n        const status = new ParseStatus();\r\n        for (const check of this._def.checks) {\r\n            if (check.kind === \"int\") {\r\n                if (!util.isInteger(input.data)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.invalid_type,\r\n                        expected: \"integer\",\r\n                        received: \"float\",\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"min\") {\r\n                const tooSmall = check.inclusive\r\n                    ? input.data < check.value\r\n                    : input.data <= check.value;\r\n                if (tooSmall) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.too_small,\r\n                        minimum: check.value,\r\n                        type: \"number\",\r\n                        inclusive: check.inclusive,\r\n                        exact: false,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"max\") {\r\n                const tooBig = check.inclusive\r\n                    ? input.data > check.value\r\n                    : input.data >= check.value;\r\n                if (tooBig) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.too_big,\r\n                        maximum: check.value,\r\n                        type: \"number\",\r\n                        inclusive: check.inclusive,\r\n                        exact: false,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"multipleOf\") {\r\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.not_multiple_of,\r\n                        multipleOf: check.value,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"finite\") {\r\n                if (!Number.isFinite(input.data)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.not_finite,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else {\r\n                util.assertNever(check);\r\n            }\r\n        }\r\n        return { status: status.value, value: input.data };\r\n    }\r\n    gte(value, message) {\r\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\r\n    }\r\n    gt(value, message) {\r\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\r\n    }\r\n    lte(value, message) {\r\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\r\n    }\r\n    lt(value, message) {\r\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\r\n    }\r\n    setLimit(kind, value, inclusive, message) {\r\n        return new ZodNumber({\r\n            ...this._def,\r\n            checks: [\r\n                ...this._def.checks,\r\n                {\r\n                    kind,\r\n                    value,\r\n                    inclusive,\r\n                    message: errorUtil.toString(message),\r\n                },\r\n            ],\r\n        });\r\n    }\r\n    _addCheck(check) {\r\n        return new ZodNumber({\r\n            ...this._def,\r\n            checks: [...this._def.checks, check],\r\n        });\r\n    }\r\n    int(message) {\r\n        return this._addCheck({\r\n            kind: \"int\",\r\n            message: errorUtil.toString(message),\r\n        });\r\n    }\r\n    positive(message) {\r\n        return this._addCheck({\r\n            kind: \"min\",\r\n            value: 0,\r\n            inclusive: false,\r\n            message: errorUtil.toString(message),\r\n        });\r\n    }\r\n    negative(message) {\r\n        return this._addCheck({\r\n            kind: \"max\",\r\n            value: 0,\r\n            inclusive: false,\r\n            message: errorUtil.toString(message),\r\n        });\r\n    }\r\n    nonpositive(message) {\r\n        return this._addCheck({\r\n            kind: \"max\",\r\n            value: 0,\r\n            inclusive: true,\r\n            message: errorUtil.toString(message),\r\n        });\r\n    }\r\n    nonnegative(message) {\r\n        return this._addCheck({\r\n            kind: \"min\",\r\n            value: 0,\r\n            inclusive: true,\r\n            message: errorUtil.toString(message),\r\n        });\r\n    }\r\n    multipleOf(value, message) {\r\n        return this._addCheck({\r\n            kind: \"multipleOf\",\r\n            value: value,\r\n            message: errorUtil.toString(message),\r\n        });\r\n    }\r\n    finite(message) {\r\n        return this._addCheck({\r\n            kind: \"finite\",\r\n            message: errorUtil.toString(message),\r\n        });\r\n    }\r\n    safe(message) {\r\n        return this._addCheck({\r\n            kind: \"min\",\r\n            inclusive: true,\r\n            value: Number.MIN_SAFE_INTEGER,\r\n            message: errorUtil.toString(message),\r\n        })._addCheck({\r\n            kind: \"max\",\r\n            inclusive: true,\r\n            value: Number.MAX_SAFE_INTEGER,\r\n            message: errorUtil.toString(message),\r\n        });\r\n    }\r\n    get minValue() {\r\n        let min = null;\r\n        for (const ch of this._def.checks) {\r\n            if (ch.kind === \"min\") {\r\n                if (min === null || ch.value > min)\r\n                    min = ch.value;\r\n            }\r\n        }\r\n        return min;\r\n    }\r\n    get maxValue() {\r\n        let max = null;\r\n        for (const ch of this._def.checks) {\r\n            if (ch.kind === \"max\") {\r\n                if (max === null || ch.value < max)\r\n                    max = ch.value;\r\n            }\r\n        }\r\n        return max;\r\n    }\r\n    get isInt() {\r\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\r\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\r\n    }\r\n    get isFinite() {\r\n        let max = null, min = null;\r\n        for (const ch of this._def.checks) {\r\n            if (ch.kind === \"finite\" ||\r\n                ch.kind === \"int\" ||\r\n                ch.kind === \"multipleOf\") {\r\n                return true;\r\n            }\r\n            else if (ch.kind === \"min\") {\r\n                if (min === null || ch.value > min)\r\n                    min = ch.value;\r\n            }\r\n            else if (ch.kind === \"max\") {\r\n                if (max === null || ch.value < max)\r\n                    max = ch.value;\r\n            }\r\n        }\r\n        return Number.isFinite(min) && Number.isFinite(max);\r\n    }\r\n}\r\nZodNumber.create = (params) => {\r\n    return new ZodNumber({\r\n        checks: [],\r\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\r\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodBigInt extends ZodType {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.min = this.gte;\r\n        this.max = this.lte;\r\n    }\r\n    _parse(input) {\r\n        if (this._def.coerce) {\r\n            input.data = BigInt(input.data);\r\n        }\r\n        const parsedType = this._getType(input);\r\n        if (parsedType !== ZodParsedType.bigint) {\r\n            const ctx = this._getOrReturnCtx(input);\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.bigint,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        let ctx = undefined;\r\n        const status = new ParseStatus();\r\n        for (const check of this._def.checks) {\r\n            if (check.kind === \"min\") {\r\n                const tooSmall = check.inclusive\r\n                    ? input.data < check.value\r\n                    : input.data <= check.value;\r\n                if (tooSmall) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.too_small,\r\n                        type: \"bigint\",\r\n                        minimum: check.value,\r\n                        inclusive: check.inclusive,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"max\") {\r\n                const tooBig = check.inclusive\r\n                    ? input.data > check.value\r\n                    : input.data >= check.value;\r\n                if (tooBig) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.too_big,\r\n                        type: \"bigint\",\r\n                        maximum: check.value,\r\n                        inclusive: check.inclusive,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"multipleOf\") {\r\n                if (input.data % check.value !== BigInt(0)) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.not_multiple_of,\r\n                        multipleOf: check.value,\r\n                        message: check.message,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else {\r\n                util.assertNever(check);\r\n            }\r\n        }\r\n        return { status: status.value, value: input.data };\r\n    }\r\n    gte(value, message) {\r\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\r\n    }\r\n    gt(value, message) {\r\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\r\n    }\r\n    lte(value, message) {\r\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\r\n    }\r\n    lt(value, message) {\r\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\r\n    }\r\n    setLimit(kind, value, inclusive, message) {\r\n        return new ZodBigInt({\r\n            ...this._def,\r\n            checks: [\r\n                ...this._def.checks,\r\n                {\r\n                    kind,\r\n                    value,\r\n                    inclusive,\r\n                    message: errorUtil.toString(message),\r\n                },\r\n            ],\r\n        });\r\n    }\r\n    _addCheck(check) {\r\n        return new ZodBigInt({\r\n            ...this._def,\r\n            checks: [...this._def.checks, check],\r\n        });\r\n    }\r\n    positive(message) {\r\n        return this._addCheck({\r\n            kind: \"min\",\r\n            value: BigInt(0),\r\n            inclusive: false,\r\n            message: errorUtil.toString(message),\r\n        });\r\n    }\r\n    negative(message) {\r\n        return this._addCheck({\r\n            kind: \"max\",\r\n            value: BigInt(0),\r\n            inclusive: false,\r\n            message: errorUtil.toString(message),\r\n        });\r\n    }\r\n    nonpositive(message) {\r\n        return this._addCheck({\r\n            kind: \"max\",\r\n            value: BigInt(0),\r\n            inclusive: true,\r\n            message: errorUtil.toString(message),\r\n        });\r\n    }\r\n    nonnegative(message) {\r\n        return this._addCheck({\r\n            kind: \"min\",\r\n            value: BigInt(0),\r\n            inclusive: true,\r\n            message: errorUtil.toString(message),\r\n        });\r\n    }\r\n    multipleOf(value, message) {\r\n        return this._addCheck({\r\n            kind: \"multipleOf\",\r\n            value,\r\n            message: errorUtil.toString(message),\r\n        });\r\n    }\r\n    get minValue() {\r\n        let min = null;\r\n        for (const ch of this._def.checks) {\r\n            if (ch.kind === \"min\") {\r\n                if (min === null || ch.value > min)\r\n                    min = ch.value;\r\n            }\r\n        }\r\n        return min;\r\n    }\r\n    get maxValue() {\r\n        let max = null;\r\n        for (const ch of this._def.checks) {\r\n            if (ch.kind === \"max\") {\r\n                if (max === null || ch.value < max)\r\n                    max = ch.value;\r\n            }\r\n        }\r\n        return max;\r\n    }\r\n}\r\nZodBigInt.create = (params) => {\r\n    var _a;\r\n    return new ZodBigInt({\r\n        checks: [],\r\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\r\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodBoolean extends ZodType {\r\n    _parse(input) {\r\n        if (this._def.coerce) {\r\n            input.data = Boolean(input.data);\r\n        }\r\n        const parsedType = this._getType(input);\r\n        if (parsedType !== ZodParsedType.boolean) {\r\n            const ctx = this._getOrReturnCtx(input);\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.boolean,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        return OK(input.data);\r\n    }\r\n}\r\nZodBoolean.create = (params) => {\r\n    return new ZodBoolean({\r\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\r\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodDate extends ZodType {\r\n    _parse(input) {\r\n        if (this._def.coerce) {\r\n            input.data = new Date(input.data);\r\n        }\r\n        const parsedType = this._getType(input);\r\n        if (parsedType !== ZodParsedType.date) {\r\n            const ctx = this._getOrReturnCtx(input);\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.date,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        if (isNaN(input.data.getTime())) {\r\n            const ctx = this._getOrReturnCtx(input);\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_date,\r\n            });\r\n            return INVALID;\r\n        }\r\n        const status = new ParseStatus();\r\n        let ctx = undefined;\r\n        for (const check of this._def.checks) {\r\n            if (check.kind === \"min\") {\r\n                if (input.data.getTime() < check.value) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.too_small,\r\n                        message: check.message,\r\n                        inclusive: true,\r\n                        exact: false,\r\n                        minimum: check.value,\r\n                        type: \"date\",\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (check.kind === \"max\") {\r\n                if (input.data.getTime() > check.value) {\r\n                    ctx = this._getOrReturnCtx(input, ctx);\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.too_big,\r\n                        message: check.message,\r\n                        inclusive: true,\r\n                        exact: false,\r\n                        maximum: check.value,\r\n                        type: \"date\",\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else {\r\n                util.assertNever(check);\r\n            }\r\n        }\r\n        return {\r\n            status: status.value,\r\n            value: new Date(input.data.getTime()),\r\n        };\r\n    }\r\n    _addCheck(check) {\r\n        return new ZodDate({\r\n            ...this._def,\r\n            checks: [...this._def.checks, check],\r\n        });\r\n    }\r\n    min(minDate, message) {\r\n        return this._addCheck({\r\n            kind: \"min\",\r\n            value: minDate.getTime(),\r\n            message: errorUtil.toString(message),\r\n        });\r\n    }\r\n    max(maxDate, message) {\r\n        return this._addCheck({\r\n            kind: \"max\",\r\n            value: maxDate.getTime(),\r\n            message: errorUtil.toString(message),\r\n        });\r\n    }\r\n    get minDate() {\r\n        let min = null;\r\n        for (const ch of this._def.checks) {\r\n            if (ch.kind === \"min\") {\r\n                if (min === null || ch.value > min)\r\n                    min = ch.value;\r\n            }\r\n        }\r\n        return min != null ? new Date(min) : null;\r\n    }\r\n    get maxDate() {\r\n        let max = null;\r\n        for (const ch of this._def.checks) {\r\n            if (ch.kind === \"max\") {\r\n                if (max === null || ch.value < max)\r\n                    max = ch.value;\r\n            }\r\n        }\r\n        return max != null ? new Date(max) : null;\r\n    }\r\n}\r\nZodDate.create = (params) => {\r\n    return new ZodDate({\r\n        checks: [],\r\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\r\n        typeName: ZodFirstPartyTypeKind.ZodDate,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodSymbol extends ZodType {\r\n    _parse(input) {\r\n        const parsedType = this._getType(input);\r\n        if (parsedType !== ZodParsedType.symbol) {\r\n            const ctx = this._getOrReturnCtx(input);\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.symbol,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        return OK(input.data);\r\n    }\r\n}\r\nZodSymbol.create = (params) => {\r\n    return new ZodSymbol({\r\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodUndefined extends ZodType {\r\n    _parse(input) {\r\n        const parsedType = this._getType(input);\r\n        if (parsedType !== ZodParsedType.undefined) {\r\n            const ctx = this._getOrReturnCtx(input);\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.undefined,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        return OK(input.data);\r\n    }\r\n}\r\nZodUndefined.create = (params) => {\r\n    return new ZodUndefined({\r\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodNull extends ZodType {\r\n    _parse(input) {\r\n        const parsedType = this._getType(input);\r\n        if (parsedType !== ZodParsedType.null) {\r\n            const ctx = this._getOrReturnCtx(input);\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.null,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        return OK(input.data);\r\n    }\r\n}\r\nZodNull.create = (params) => {\r\n    return new ZodNull({\r\n        typeName: ZodFirstPartyTypeKind.ZodNull,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodAny extends ZodType {\r\n    constructor() {\r\n        super(...arguments);\r\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\r\n        this._any = true;\r\n    }\r\n    _parse(input) {\r\n        return OK(input.data);\r\n    }\r\n}\r\nZodAny.create = (params) => {\r\n    return new ZodAny({\r\n        typeName: ZodFirstPartyTypeKind.ZodAny,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodUnknown extends ZodType {\r\n    constructor() {\r\n        super(...arguments);\r\n        // required\r\n        this._unknown = true;\r\n    }\r\n    _parse(input) {\r\n        return OK(input.data);\r\n    }\r\n}\r\nZodUnknown.create = (params) => {\r\n    return new ZodUnknown({\r\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodNever extends ZodType {\r\n    _parse(input) {\r\n        const ctx = this._getOrReturnCtx(input);\r\n        addIssueToContext(ctx, {\r\n            code: ZodIssueCode.invalid_type,\r\n            expected: ZodParsedType.never,\r\n            received: ctx.parsedType,\r\n        });\r\n        return INVALID;\r\n    }\r\n}\r\nZodNever.create = (params) => {\r\n    return new ZodNever({\r\n        typeName: ZodFirstPartyTypeKind.ZodNever,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodVoid extends ZodType {\r\n    _parse(input) {\r\n        const parsedType = this._getType(input);\r\n        if (parsedType !== ZodParsedType.undefined) {\r\n            const ctx = this._getOrReturnCtx(input);\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.void,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        return OK(input.data);\r\n    }\r\n}\r\nZodVoid.create = (params) => {\r\n    return new ZodVoid({\r\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodArray extends ZodType {\r\n    _parse(input) {\r\n        const { ctx, status } = this._processInputParams(input);\r\n        const def = this._def;\r\n        if (ctx.parsedType !== ZodParsedType.array) {\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.array,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        if (def.exactLength !== null) {\r\n            const tooBig = ctx.data.length > def.exactLength.value;\r\n            const tooSmall = ctx.data.length < def.exactLength.value;\r\n            if (tooBig || tooSmall) {\r\n                addIssueToContext(ctx, {\r\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\r\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\r\n                    maximum: (tooBig ? def.exactLength.value : undefined),\r\n                    type: \"array\",\r\n                    inclusive: true,\r\n                    exact: true,\r\n                    message: def.exactLength.message,\r\n                });\r\n                status.dirty();\r\n            }\r\n        }\r\n        if (def.minLength !== null) {\r\n            if (ctx.data.length < def.minLength.value) {\r\n                addIssueToContext(ctx, {\r\n                    code: ZodIssueCode.too_small,\r\n                    minimum: def.minLength.value,\r\n                    type: \"array\",\r\n                    inclusive: true,\r\n                    exact: false,\r\n                    message: def.minLength.message,\r\n                });\r\n                status.dirty();\r\n            }\r\n        }\r\n        if (def.maxLength !== null) {\r\n            if (ctx.data.length > def.maxLength.value) {\r\n                addIssueToContext(ctx, {\r\n                    code: ZodIssueCode.too_big,\r\n                    maximum: def.maxLength.value,\r\n                    type: \"array\",\r\n                    inclusive: true,\r\n                    exact: false,\r\n                    message: def.maxLength.message,\r\n                });\r\n                status.dirty();\r\n            }\r\n        }\r\n        if (ctx.common.async) {\r\n            return Promise.all([...ctx.data].map((item, i) => {\r\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\r\n            })).then((result) => {\r\n                return ParseStatus.mergeArray(status, result);\r\n            });\r\n        }\r\n        const result = [...ctx.data].map((item, i) => {\r\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\r\n        });\r\n        return ParseStatus.mergeArray(status, result);\r\n    }\r\n    get element() {\r\n        return this._def.type;\r\n    }\r\n    min(minLength, message) {\r\n        return new ZodArray({\r\n            ...this._def,\r\n            minLength: { value: minLength, message: errorUtil.toString(message) },\r\n        });\r\n    }\r\n    max(maxLength, message) {\r\n        return new ZodArray({\r\n            ...this._def,\r\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\r\n        });\r\n    }\r\n    length(len, message) {\r\n        return new ZodArray({\r\n            ...this._def,\r\n            exactLength: { value: len, message: errorUtil.toString(message) },\r\n        });\r\n    }\r\n    nonempty(message) {\r\n        return this.min(1, message);\r\n    }\r\n}\r\nZodArray.create = (schema, params) => {\r\n    return new ZodArray({\r\n        type: schema,\r\n        minLength: null,\r\n        maxLength: null,\r\n        exactLength: null,\r\n        typeName: ZodFirstPartyTypeKind.ZodArray,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nfunction deepPartialify(schema) {\r\n    if (schema instanceof ZodObject) {\r\n        const newShape = {};\r\n        for (const key in schema.shape) {\r\n            const fieldSchema = schema.shape[key];\r\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\r\n        }\r\n        return new ZodObject({\r\n            ...schema._def,\r\n            shape: () => newShape,\r\n        });\r\n    }\r\n    else if (schema instanceof ZodArray) {\r\n        return new ZodArray({\r\n            ...schema._def,\r\n            type: deepPartialify(schema.element),\r\n        });\r\n    }\r\n    else if (schema instanceof ZodOptional) {\r\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\r\n    }\r\n    else if (schema instanceof ZodNullable) {\r\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\r\n    }\r\n    else if (schema instanceof ZodTuple) {\r\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\r\n    }\r\n    else {\r\n        return schema;\r\n    }\r\n}\r\nclass ZodObject extends ZodType {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._cached = null;\r\n        /**\r\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\r\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\r\n         */\r\n        this.nonstrict = this.passthrough;\r\n        // extend<\r\n        //   Augmentation extends ZodRawShape,\r\n        //   NewOutput extends util.flatten<{\r\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\r\n        //       ? Augmentation[k][\"_output\"]\r\n        //       : k extends keyof Output\r\n        //       ? Output[k]\r\n        //       : never;\r\n        //   }>,\r\n        //   NewInput extends util.flatten<{\r\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\r\n        //       ? Augmentation[k][\"_input\"]\r\n        //       : k extends keyof Input\r\n        //       ? Input[k]\r\n        //       : never;\r\n        //   }>\r\n        // >(\r\n        //   augmentation: Augmentation\r\n        // ): ZodObject<\r\n        //   extendShape<T, Augmentation>,\r\n        //   UnknownKeys,\r\n        //   Catchall,\r\n        //   NewOutput,\r\n        //   NewInput\r\n        // > {\r\n        //   return new ZodObject({\r\n        //     ...this._def,\r\n        //     shape: () => ({\r\n        //       ...this._def.shape(),\r\n        //       ...augmentation,\r\n        //     }),\r\n        //   }) as any;\r\n        // }\r\n        /**\r\n         * @deprecated Use `.extend` instead\r\n         *  */\r\n        this.augment = this.extend;\r\n    }\r\n    _getCached() {\r\n        if (this._cached !== null)\r\n            return this._cached;\r\n        const shape = this._def.shape();\r\n        const keys = util.objectKeys(shape);\r\n        return (this._cached = { shape, keys });\r\n    }\r\n    _parse(input) {\r\n        const parsedType = this._getType(input);\r\n        if (parsedType !== ZodParsedType.object) {\r\n            const ctx = this._getOrReturnCtx(input);\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.object,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        const { status, ctx } = this._processInputParams(input);\r\n        const { shape, keys: shapeKeys } = this._getCached();\r\n        const extraKeys = [];\r\n        if (!(this._def.catchall instanceof ZodNever &&\r\n            this._def.unknownKeys === \"strip\")) {\r\n            for (const key in ctx.data) {\r\n                if (!shapeKeys.includes(key)) {\r\n                    extraKeys.push(key);\r\n                }\r\n            }\r\n        }\r\n        const pairs = [];\r\n        for (const key of shapeKeys) {\r\n            const keyValidator = shape[key];\r\n            const value = ctx.data[key];\r\n            pairs.push({\r\n                key: { status: \"valid\", value: key },\r\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\r\n                alwaysSet: key in ctx.data,\r\n            });\r\n        }\r\n        if (this._def.catchall instanceof ZodNever) {\r\n            const unknownKeys = this._def.unknownKeys;\r\n            if (unknownKeys === \"passthrough\") {\r\n                for (const key of extraKeys) {\r\n                    pairs.push({\r\n                        key: { status: \"valid\", value: key },\r\n                        value: { status: \"valid\", value: ctx.data[key] },\r\n                    });\r\n                }\r\n            }\r\n            else if (unknownKeys === \"strict\") {\r\n                if (extraKeys.length > 0) {\r\n                    addIssueToContext(ctx, {\r\n                        code: ZodIssueCode.unrecognized_keys,\r\n                        keys: extraKeys,\r\n                    });\r\n                    status.dirty();\r\n                }\r\n            }\r\n            else if (unknownKeys === \"strip\") ;\r\n            else {\r\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\r\n            }\r\n        }\r\n        else {\r\n            // run catchall validation\r\n            const catchall = this._def.catchall;\r\n            for (const key of extraKeys) {\r\n                const value = ctx.data[key];\r\n                pairs.push({\r\n                    key: { status: \"valid\", value: key },\r\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\r\n                    ),\r\n                    alwaysSet: key in ctx.data,\r\n                });\r\n            }\r\n        }\r\n        if (ctx.common.async) {\r\n            return Promise.resolve()\r\n                .then(async () => {\r\n                const syncPairs = [];\r\n                for (const pair of pairs) {\r\n                    const key = await pair.key;\r\n                    const value = await pair.value;\r\n                    syncPairs.push({\r\n                        key,\r\n                        value,\r\n                        alwaysSet: pair.alwaysSet,\r\n                    });\r\n                }\r\n                return syncPairs;\r\n            })\r\n                .then((syncPairs) => {\r\n                return ParseStatus.mergeObjectSync(status, syncPairs);\r\n            });\r\n        }\r\n        else {\r\n            return ParseStatus.mergeObjectSync(status, pairs);\r\n        }\r\n    }\r\n    get shape() {\r\n        return this._def.shape();\r\n    }\r\n    strict(message) {\r\n        errorUtil.errToObj;\r\n        return new ZodObject({\r\n            ...this._def,\r\n            unknownKeys: \"strict\",\r\n            ...(message !== undefined\r\n                ? {\r\n                    errorMap: (issue, ctx) => {\r\n                        var _a, _b, _c, _d;\r\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\r\n                        if (issue.code === \"unrecognized_keys\")\r\n                            return {\r\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\r\n                            };\r\n                        return {\r\n                            message: defaultError,\r\n                        };\r\n                    },\r\n                }\r\n                : {}),\r\n        });\r\n    }\r\n    strip() {\r\n        return new ZodObject({\r\n            ...this._def,\r\n            unknownKeys: \"strip\",\r\n        });\r\n    }\r\n    passthrough() {\r\n        return new ZodObject({\r\n            ...this._def,\r\n            unknownKeys: \"passthrough\",\r\n        });\r\n    }\r\n    // const AugmentFactory =\r\n    //   <Def extends ZodObjectDef>(def: Def) =>\r\n    //   <Augmentation extends ZodRawShape>(\r\n    //     augmentation: Augmentation\r\n    //   ): ZodObject<\r\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\r\n    //     Def[\"unknownKeys\"],\r\n    //     Def[\"catchall\"]\r\n    //   > => {\r\n    //     return new ZodObject({\r\n    //       ...def,\r\n    //       shape: () => ({\r\n    //         ...def.shape(),\r\n    //         ...augmentation,\r\n    //       }),\r\n    //     }) as any;\r\n    //   };\r\n    extend(augmentation) {\r\n        return new ZodObject({\r\n            ...this._def,\r\n            shape: () => ({\r\n                ...this._def.shape(),\r\n                ...augmentation,\r\n            }),\r\n        });\r\n    }\r\n    /**\r\n     * Prior to zod@1.0.12 there was a bug in the\r\n     * inferred type of merged objects. Please\r\n     * upgrade if you are experiencing issues.\r\n     */\r\n    merge(merging) {\r\n        const merged = new ZodObject({\r\n            unknownKeys: merging._def.unknownKeys,\r\n            catchall: merging._def.catchall,\r\n            shape: () => ({\r\n                ...this._def.shape(),\r\n                ...merging._def.shape(),\r\n            }),\r\n            typeName: ZodFirstPartyTypeKind.ZodObject,\r\n        });\r\n        return merged;\r\n    }\r\n    // merge<\r\n    //   Incoming extends AnyZodObject,\r\n    //   Augmentation extends Incoming[\"shape\"],\r\n    //   NewOutput extends {\r\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\r\n    //       ? Augmentation[k][\"_output\"]\r\n    //       : k extends keyof Output\r\n    //       ? Output[k]\r\n    //       : never;\r\n    //   },\r\n    //   NewInput extends {\r\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\r\n    //       ? Augmentation[k][\"_input\"]\r\n    //       : k extends keyof Input\r\n    //       ? Input[k]\r\n    //       : never;\r\n    //   }\r\n    // >(\r\n    //   merging: Incoming\r\n    // ): ZodObject<\r\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\r\n    //   Incoming[\"_def\"][\"unknownKeys\"],\r\n    //   Incoming[\"_def\"][\"catchall\"],\r\n    //   NewOutput,\r\n    //   NewInput\r\n    // > {\r\n    //   const merged: any = new ZodObject({\r\n    //     unknownKeys: merging._def.unknownKeys,\r\n    //     catchall: merging._def.catchall,\r\n    //     shape: () =>\r\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\r\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\r\n    //   }) as any;\r\n    //   return merged;\r\n    // }\r\n    setKey(key, schema) {\r\n        return this.augment({ [key]: schema });\r\n    }\r\n    // merge<Incoming extends AnyZodObject>(\r\n    //   merging: Incoming\r\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\r\n    // ZodObject<\r\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\r\n    //   Incoming[\"_def\"][\"unknownKeys\"],\r\n    //   Incoming[\"_def\"][\"catchall\"]\r\n    // > {\r\n    //   // const mergedShape = objectUtil.mergeShapes(\r\n    //   //   this._def.shape(),\r\n    //   //   merging._def.shape()\r\n    //   // );\r\n    //   const merged: any = new ZodObject({\r\n    //     unknownKeys: merging._def.unknownKeys,\r\n    //     catchall: merging._def.catchall,\r\n    //     shape: () =>\r\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\r\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\r\n    //   }) as any;\r\n    //   return merged;\r\n    // }\r\n    catchall(index) {\r\n        return new ZodObject({\r\n            ...this._def,\r\n            catchall: index,\r\n        });\r\n    }\r\n    pick(mask) {\r\n        const shape = {};\r\n        util.objectKeys(mask).forEach((key) => {\r\n            if (mask[key] && this.shape[key]) {\r\n                shape[key] = this.shape[key];\r\n            }\r\n        });\r\n        return new ZodObject({\r\n            ...this._def,\r\n            shape: () => shape,\r\n        });\r\n    }\r\n    omit(mask) {\r\n        const shape = {};\r\n        util.objectKeys(this.shape).forEach((key) => {\r\n            if (!mask[key]) {\r\n                shape[key] = this.shape[key];\r\n            }\r\n        });\r\n        return new ZodObject({\r\n            ...this._def,\r\n            shape: () => shape,\r\n        });\r\n    }\r\n    /**\r\n     * @deprecated\r\n     */\r\n    deepPartial() {\r\n        return deepPartialify(this);\r\n    }\r\n    partial(mask) {\r\n        const newShape = {};\r\n        util.objectKeys(this.shape).forEach((key) => {\r\n            const fieldSchema = this.shape[key];\r\n            if (mask && !mask[key]) {\r\n                newShape[key] = fieldSchema;\r\n            }\r\n            else {\r\n                newShape[key] = fieldSchema.optional();\r\n            }\r\n        });\r\n        return new ZodObject({\r\n            ...this._def,\r\n            shape: () => newShape,\r\n        });\r\n    }\r\n    required(mask) {\r\n        const newShape = {};\r\n        util.objectKeys(this.shape).forEach((key) => {\r\n            if (mask && !mask[key]) {\r\n                newShape[key] = this.shape[key];\r\n            }\r\n            else {\r\n                const fieldSchema = this.shape[key];\r\n                let newField = fieldSchema;\r\n                while (newField instanceof ZodOptional) {\r\n                    newField = newField._def.innerType;\r\n                }\r\n                newShape[key] = newField;\r\n            }\r\n        });\r\n        return new ZodObject({\r\n            ...this._def,\r\n            shape: () => newShape,\r\n        });\r\n    }\r\n    keyof() {\r\n        return createZodEnum(util.objectKeys(this.shape));\r\n    }\r\n}\r\nZodObject.create = (shape, params) => {\r\n    return new ZodObject({\r\n        shape: () => shape,\r\n        unknownKeys: \"strip\",\r\n        catchall: ZodNever.create(),\r\n        typeName: ZodFirstPartyTypeKind.ZodObject,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nZodObject.strictCreate = (shape, params) => {\r\n    return new ZodObject({\r\n        shape: () => shape,\r\n        unknownKeys: \"strict\",\r\n        catchall: ZodNever.create(),\r\n        typeName: ZodFirstPartyTypeKind.ZodObject,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nZodObject.lazycreate = (shape, params) => {\r\n    return new ZodObject({\r\n        shape,\r\n        unknownKeys: \"strip\",\r\n        catchall: ZodNever.create(),\r\n        typeName: ZodFirstPartyTypeKind.ZodObject,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodUnion extends ZodType {\r\n    _parse(input) {\r\n        const { ctx } = this._processInputParams(input);\r\n        const options = this._def.options;\r\n        function handleResults(results) {\r\n            // return first issue-free validation if it exists\r\n            for (const result of results) {\r\n                if (result.result.status === \"valid\") {\r\n                    return result.result;\r\n                }\r\n            }\r\n            for (const result of results) {\r\n                if (result.result.status === \"dirty\") {\r\n                    // add issues from dirty option\r\n                    ctx.common.issues.push(...result.ctx.common.issues);\r\n                    return result.result;\r\n                }\r\n            }\r\n            // return invalid\r\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_union,\r\n                unionErrors,\r\n            });\r\n            return INVALID;\r\n        }\r\n        if (ctx.common.async) {\r\n            return Promise.all(options.map(async (option) => {\r\n                const childCtx = {\r\n                    ...ctx,\r\n                    common: {\r\n                        ...ctx.common,\r\n                        issues: [],\r\n                    },\r\n                    parent: null,\r\n                };\r\n                return {\r\n                    result: await option._parseAsync({\r\n                        data: ctx.data,\r\n                        path: ctx.path,\r\n                        parent: childCtx,\r\n                    }),\r\n                    ctx: childCtx,\r\n                };\r\n            })).then(handleResults);\r\n        }\r\n        else {\r\n            let dirty = undefined;\r\n            const issues = [];\r\n            for (const option of options) {\r\n                const childCtx = {\r\n                    ...ctx,\r\n                    common: {\r\n                        ...ctx.common,\r\n                        issues: [],\r\n                    },\r\n                    parent: null,\r\n                };\r\n                const result = option._parseSync({\r\n                    data: ctx.data,\r\n                    path: ctx.path,\r\n                    parent: childCtx,\r\n                });\r\n                if (result.status === \"valid\") {\r\n                    return result;\r\n                }\r\n                else if (result.status === \"dirty\" && !dirty) {\r\n                    dirty = { result, ctx: childCtx };\r\n                }\r\n                if (childCtx.common.issues.length) {\r\n                    issues.push(childCtx.common.issues);\r\n                }\r\n            }\r\n            if (dirty) {\r\n                ctx.common.issues.push(...dirty.ctx.common.issues);\r\n                return dirty.result;\r\n            }\r\n            const unionErrors = issues.map((issues) => new ZodError(issues));\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_union,\r\n                unionErrors,\r\n            });\r\n            return INVALID;\r\n        }\r\n    }\r\n    get options() {\r\n        return this._def.options;\r\n    }\r\n}\r\nZodUnion.create = (types, params) => {\r\n    return new ZodUnion({\r\n        options: types,\r\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\n/////////////////////////////////////////////////////\r\n/////////////////////////////////////////////////////\r\n//////////                                 //////////\r\n//////////      ZodDiscriminatedUnion      //////////\r\n//////////                                 //////////\r\n/////////////////////////////////////////////////////\r\n/////////////////////////////////////////////////////\r\nconst getDiscriminator = (type) => {\r\n    if (type instanceof ZodLazy) {\r\n        return getDiscriminator(type.schema);\r\n    }\r\n    else if (type instanceof ZodEffects) {\r\n        return getDiscriminator(type.innerType());\r\n    }\r\n    else if (type instanceof ZodLiteral) {\r\n        return [type.value];\r\n    }\r\n    else if (type instanceof ZodEnum) {\r\n        return type.options;\r\n    }\r\n    else if (type instanceof ZodNativeEnum) {\r\n        // eslint-disable-next-line ban/ban\r\n        return util.objectValues(type.enum);\r\n    }\r\n    else if (type instanceof ZodDefault) {\r\n        return getDiscriminator(type._def.innerType);\r\n    }\r\n    else if (type instanceof ZodUndefined) {\r\n        return [undefined];\r\n    }\r\n    else if (type instanceof ZodNull) {\r\n        return [null];\r\n    }\r\n    else if (type instanceof ZodOptional) {\r\n        return [undefined, ...getDiscriminator(type.unwrap())];\r\n    }\r\n    else if (type instanceof ZodNullable) {\r\n        return [null, ...getDiscriminator(type.unwrap())];\r\n    }\r\n    else if (type instanceof ZodBranded) {\r\n        return getDiscriminator(type.unwrap());\r\n    }\r\n    else if (type instanceof ZodReadonly) {\r\n        return getDiscriminator(type.unwrap());\r\n    }\r\n    else if (type instanceof ZodCatch) {\r\n        return getDiscriminator(type._def.innerType);\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n};\r\nclass ZodDiscriminatedUnion extends ZodType {\r\n    _parse(input) {\r\n        const { ctx } = this._processInputParams(input);\r\n        if (ctx.parsedType !== ZodParsedType.object) {\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.object,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        const discriminator = this.discriminator;\r\n        const discriminatorValue = ctx.data[discriminator];\r\n        const option = this.optionsMap.get(discriminatorValue);\r\n        if (!option) {\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_union_discriminator,\r\n                options: Array.from(this.optionsMap.keys()),\r\n                path: [discriminator],\r\n            });\r\n            return INVALID;\r\n        }\r\n        if (ctx.common.async) {\r\n            return option._parseAsync({\r\n                data: ctx.data,\r\n                path: ctx.path,\r\n                parent: ctx,\r\n            });\r\n        }\r\n        else {\r\n            return option._parseSync({\r\n                data: ctx.data,\r\n                path: ctx.path,\r\n                parent: ctx,\r\n            });\r\n        }\r\n    }\r\n    get discriminator() {\r\n        return this._def.discriminator;\r\n    }\r\n    get options() {\r\n        return this._def.options;\r\n    }\r\n    get optionsMap() {\r\n        return this._def.optionsMap;\r\n    }\r\n    /**\r\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\r\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\r\n     * have a different value for each object in the union.\r\n     * @param discriminator the name of the discriminator property\r\n     * @param types an array of object schemas\r\n     * @param params\r\n     */\r\n    static create(discriminator, options, params) {\r\n        // Get all the valid discriminator values\r\n        const optionsMap = new Map();\r\n        // try {\r\n        for (const type of options) {\r\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\r\n            if (!discriminatorValues.length) {\r\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\r\n            }\r\n            for (const value of discriminatorValues) {\r\n                if (optionsMap.has(value)) {\r\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\r\n                }\r\n                optionsMap.set(value, type);\r\n            }\r\n        }\r\n        return new ZodDiscriminatedUnion({\r\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\r\n            discriminator,\r\n            options,\r\n            optionsMap,\r\n            ...processCreateParams(params),\r\n        });\r\n    }\r\n}\r\nfunction mergeValues(a, b) {\r\n    const aType = getParsedType(a);\r\n    const bType = getParsedType(b);\r\n    if (a === b) {\r\n        return { valid: true, data: a };\r\n    }\r\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\r\n        const bKeys = util.objectKeys(b);\r\n        const sharedKeys = util\r\n            .objectKeys(a)\r\n            .filter((key) => bKeys.indexOf(key) !== -1);\r\n        const newObj = { ...a, ...b };\r\n        for (const key of sharedKeys) {\r\n            const sharedValue = mergeValues(a[key], b[key]);\r\n            if (!sharedValue.valid) {\r\n                return { valid: false };\r\n            }\r\n            newObj[key] = sharedValue.data;\r\n        }\r\n        return { valid: true, data: newObj };\r\n    }\r\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\r\n        if (a.length !== b.length) {\r\n            return { valid: false };\r\n        }\r\n        const newArray = [];\r\n        for (let index = 0; index < a.length; index++) {\r\n            const itemA = a[index];\r\n            const itemB = b[index];\r\n            const sharedValue = mergeValues(itemA, itemB);\r\n            if (!sharedValue.valid) {\r\n                return { valid: false };\r\n            }\r\n            newArray.push(sharedValue.data);\r\n        }\r\n        return { valid: true, data: newArray };\r\n    }\r\n    else if (aType === ZodParsedType.date &&\r\n        bType === ZodParsedType.date &&\r\n        +a === +b) {\r\n        return { valid: true, data: a };\r\n    }\r\n    else {\r\n        return { valid: false };\r\n    }\r\n}\r\nclass ZodIntersection extends ZodType {\r\n    _parse(input) {\r\n        const { status, ctx } = this._processInputParams(input);\r\n        const handleParsed = (parsedLeft, parsedRight) => {\r\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\r\n                return INVALID;\r\n            }\r\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\r\n            if (!merged.valid) {\r\n                addIssueToContext(ctx, {\r\n                    code: ZodIssueCode.invalid_intersection_types,\r\n                });\r\n                return INVALID;\r\n            }\r\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\r\n                status.dirty();\r\n            }\r\n            return { status: status.value, value: merged.data };\r\n        };\r\n        if (ctx.common.async) {\r\n            return Promise.all([\r\n                this._def.left._parseAsync({\r\n                    data: ctx.data,\r\n                    path: ctx.path,\r\n                    parent: ctx,\r\n                }),\r\n                this._def.right._parseAsync({\r\n                    data: ctx.data,\r\n                    path: ctx.path,\r\n                    parent: ctx,\r\n                }),\r\n            ]).then(([left, right]) => handleParsed(left, right));\r\n        }\r\n        else {\r\n            return handleParsed(this._def.left._parseSync({\r\n                data: ctx.data,\r\n                path: ctx.path,\r\n                parent: ctx,\r\n            }), this._def.right._parseSync({\r\n                data: ctx.data,\r\n                path: ctx.path,\r\n                parent: ctx,\r\n            }));\r\n        }\r\n    }\r\n}\r\nZodIntersection.create = (left, right, params) => {\r\n    return new ZodIntersection({\r\n        left: left,\r\n        right: right,\r\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodTuple extends ZodType {\r\n    _parse(input) {\r\n        const { status, ctx } = this._processInputParams(input);\r\n        if (ctx.parsedType !== ZodParsedType.array) {\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.array,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        if (ctx.data.length < this._def.items.length) {\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.too_small,\r\n                minimum: this._def.items.length,\r\n                inclusive: true,\r\n                exact: false,\r\n                type: \"array\",\r\n            });\r\n            return INVALID;\r\n        }\r\n        const rest = this._def.rest;\r\n        if (!rest && ctx.data.length > this._def.items.length) {\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.too_big,\r\n                maximum: this._def.items.length,\r\n                inclusive: true,\r\n                exact: false,\r\n                type: \"array\",\r\n            });\r\n            status.dirty();\r\n        }\r\n        const items = [...ctx.data]\r\n            .map((item, itemIndex) => {\r\n            const schema = this._def.items[itemIndex] || this._def.rest;\r\n            if (!schema)\r\n                return null;\r\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\r\n        })\r\n            .filter((x) => !!x); // filter nulls\r\n        if (ctx.common.async) {\r\n            return Promise.all(items).then((results) => {\r\n                return ParseStatus.mergeArray(status, results);\r\n            });\r\n        }\r\n        else {\r\n            return ParseStatus.mergeArray(status, items);\r\n        }\r\n    }\r\n    get items() {\r\n        return this._def.items;\r\n    }\r\n    rest(rest) {\r\n        return new ZodTuple({\r\n            ...this._def,\r\n            rest,\r\n        });\r\n    }\r\n}\r\nZodTuple.create = (schemas, params) => {\r\n    if (!Array.isArray(schemas)) {\r\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\r\n    }\r\n    return new ZodTuple({\r\n        items: schemas,\r\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\r\n        rest: null,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodRecord extends ZodType {\r\n    get keySchema() {\r\n        return this._def.keyType;\r\n    }\r\n    get valueSchema() {\r\n        return this._def.valueType;\r\n    }\r\n    _parse(input) {\r\n        const { status, ctx } = this._processInputParams(input);\r\n        if (ctx.parsedType !== ZodParsedType.object) {\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.object,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        const pairs = [];\r\n        const keyType = this._def.keyType;\r\n        const valueType = this._def.valueType;\r\n        for (const key in ctx.data) {\r\n            pairs.push({\r\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\r\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\r\n                alwaysSet: key in ctx.data,\r\n            });\r\n        }\r\n        if (ctx.common.async) {\r\n            return ParseStatus.mergeObjectAsync(status, pairs);\r\n        }\r\n        else {\r\n            return ParseStatus.mergeObjectSync(status, pairs);\r\n        }\r\n    }\r\n    get element() {\r\n        return this._def.valueType;\r\n    }\r\n    static create(first, second, third) {\r\n        if (second instanceof ZodType) {\r\n            return new ZodRecord({\r\n                keyType: first,\r\n                valueType: second,\r\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\r\n                ...processCreateParams(third),\r\n            });\r\n        }\r\n        return new ZodRecord({\r\n            keyType: ZodString.create(),\r\n            valueType: first,\r\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\r\n            ...processCreateParams(second),\r\n        });\r\n    }\r\n}\r\nclass ZodMap extends ZodType {\r\n    get keySchema() {\r\n        return this._def.keyType;\r\n    }\r\n    get valueSchema() {\r\n        return this._def.valueType;\r\n    }\r\n    _parse(input) {\r\n        const { status, ctx } = this._processInputParams(input);\r\n        if (ctx.parsedType !== ZodParsedType.map) {\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.map,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        const keyType = this._def.keyType;\r\n        const valueType = this._def.valueType;\r\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\r\n            return {\r\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\r\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\r\n            };\r\n        });\r\n        if (ctx.common.async) {\r\n            const finalMap = new Map();\r\n            return Promise.resolve().then(async () => {\r\n                for (const pair of pairs) {\r\n                    const key = await pair.key;\r\n                    const value = await pair.value;\r\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\r\n                        return INVALID;\r\n                    }\r\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\r\n                        status.dirty();\r\n                    }\r\n                    finalMap.set(key.value, value.value);\r\n                }\r\n                return { status: status.value, value: finalMap };\r\n            });\r\n        }\r\n        else {\r\n            const finalMap = new Map();\r\n            for (const pair of pairs) {\r\n                const key = pair.key;\r\n                const value = pair.value;\r\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\r\n                    return INVALID;\r\n                }\r\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\r\n                    status.dirty();\r\n                }\r\n                finalMap.set(key.value, value.value);\r\n            }\r\n            return { status: status.value, value: finalMap };\r\n        }\r\n    }\r\n}\r\nZodMap.create = (keyType, valueType, params) => {\r\n    return new ZodMap({\r\n        valueType,\r\n        keyType,\r\n        typeName: ZodFirstPartyTypeKind.ZodMap,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodSet extends ZodType {\r\n    _parse(input) {\r\n        const { status, ctx } = this._processInputParams(input);\r\n        if (ctx.parsedType !== ZodParsedType.set) {\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.set,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        const def = this._def;\r\n        if (def.minSize !== null) {\r\n            if (ctx.data.size < def.minSize.value) {\r\n                addIssueToContext(ctx, {\r\n                    code: ZodIssueCode.too_small,\r\n                    minimum: def.minSize.value,\r\n                    type: \"set\",\r\n                    inclusive: true,\r\n                    exact: false,\r\n                    message: def.minSize.message,\r\n                });\r\n                status.dirty();\r\n            }\r\n        }\r\n        if (def.maxSize !== null) {\r\n            if (ctx.data.size > def.maxSize.value) {\r\n                addIssueToContext(ctx, {\r\n                    code: ZodIssueCode.too_big,\r\n                    maximum: def.maxSize.value,\r\n                    type: \"set\",\r\n                    inclusive: true,\r\n                    exact: false,\r\n                    message: def.maxSize.message,\r\n                });\r\n                status.dirty();\r\n            }\r\n        }\r\n        const valueType = this._def.valueType;\r\n        function finalizeSet(elements) {\r\n            const parsedSet = new Set();\r\n            for (const element of elements) {\r\n                if (element.status === \"aborted\")\r\n                    return INVALID;\r\n                if (element.status === \"dirty\")\r\n                    status.dirty();\r\n                parsedSet.add(element.value);\r\n            }\r\n            return { status: status.value, value: parsedSet };\r\n        }\r\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\r\n        if (ctx.common.async) {\r\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\r\n        }\r\n        else {\r\n            return finalizeSet(elements);\r\n        }\r\n    }\r\n    min(minSize, message) {\r\n        return new ZodSet({\r\n            ...this._def,\r\n            minSize: { value: minSize, message: errorUtil.toString(message) },\r\n        });\r\n    }\r\n    max(maxSize, message) {\r\n        return new ZodSet({\r\n            ...this._def,\r\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\r\n        });\r\n    }\r\n    size(size, message) {\r\n        return this.min(size, message).max(size, message);\r\n    }\r\n    nonempty(message) {\r\n        return this.min(1, message);\r\n    }\r\n}\r\nZodSet.create = (valueType, params) => {\r\n    return new ZodSet({\r\n        valueType,\r\n        minSize: null,\r\n        maxSize: null,\r\n        typeName: ZodFirstPartyTypeKind.ZodSet,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodFunction extends ZodType {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.validate = this.implement;\r\n    }\r\n    _parse(input) {\r\n        const { ctx } = this._processInputParams(input);\r\n        if (ctx.parsedType !== ZodParsedType.function) {\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.function,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        function makeArgsIssue(args, error) {\r\n            return makeIssue({\r\n                data: args,\r\n                path: ctx.path,\r\n                errorMaps: [\r\n                    ctx.common.contextualErrorMap,\r\n                    ctx.schemaErrorMap,\r\n                    getErrorMap(),\r\n                    errorMap,\r\n                ].filter((x) => !!x),\r\n                issueData: {\r\n                    code: ZodIssueCode.invalid_arguments,\r\n                    argumentsError: error,\r\n                },\r\n            });\r\n        }\r\n        function makeReturnsIssue(returns, error) {\r\n            return makeIssue({\r\n                data: returns,\r\n                path: ctx.path,\r\n                errorMaps: [\r\n                    ctx.common.contextualErrorMap,\r\n                    ctx.schemaErrorMap,\r\n                    getErrorMap(),\r\n                    errorMap,\r\n                ].filter((x) => !!x),\r\n                issueData: {\r\n                    code: ZodIssueCode.invalid_return_type,\r\n                    returnTypeError: error,\r\n                },\r\n            });\r\n        }\r\n        const params = { errorMap: ctx.common.contextualErrorMap };\r\n        const fn = ctx.data;\r\n        if (this._def.returns instanceof ZodPromise) {\r\n            // Would love a way to avoid disabling this rule, but we need\r\n            // an alias (using an arrow function was what caused 2651).\r\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n            const me = this;\r\n            return OK(async function (...args) {\r\n                const error = new ZodError([]);\r\n                const parsedArgs = await me._def.args\r\n                    .parseAsync(args, params)\r\n                    .catch((e) => {\r\n                    error.addIssue(makeArgsIssue(args, e));\r\n                    throw error;\r\n                });\r\n                const result = await Reflect.apply(fn, this, parsedArgs);\r\n                const parsedReturns = await me._def.returns._def.type\r\n                    .parseAsync(result, params)\r\n                    .catch((e) => {\r\n                    error.addIssue(makeReturnsIssue(result, e));\r\n                    throw error;\r\n                });\r\n                return parsedReturns;\r\n            });\r\n        }\r\n        else {\r\n            // Would love a way to avoid disabling this rule, but we need\r\n            // an alias (using an arrow function was what caused 2651).\r\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n            const me = this;\r\n            return OK(function (...args) {\r\n                const parsedArgs = me._def.args.safeParse(args, params);\r\n                if (!parsedArgs.success) {\r\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\r\n                }\r\n                const result = Reflect.apply(fn, this, parsedArgs.data);\r\n                const parsedReturns = me._def.returns.safeParse(result, params);\r\n                if (!parsedReturns.success) {\r\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\r\n                }\r\n                return parsedReturns.data;\r\n            });\r\n        }\r\n    }\r\n    parameters() {\r\n        return this._def.args;\r\n    }\r\n    returnType() {\r\n        return this._def.returns;\r\n    }\r\n    args(...items) {\r\n        return new ZodFunction({\r\n            ...this._def,\r\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\r\n        });\r\n    }\r\n    returns(returnType) {\r\n        return new ZodFunction({\r\n            ...this._def,\r\n            returns: returnType,\r\n        });\r\n    }\r\n    implement(func) {\r\n        const validatedFunc = this.parse(func);\r\n        return validatedFunc;\r\n    }\r\n    strictImplement(func) {\r\n        const validatedFunc = this.parse(func);\r\n        return validatedFunc;\r\n    }\r\n    static create(args, returns, params) {\r\n        return new ZodFunction({\r\n            args: (args\r\n                ? args\r\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\r\n            returns: returns || ZodUnknown.create(),\r\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\r\n            ...processCreateParams(params),\r\n        });\r\n    }\r\n}\r\nclass ZodLazy extends ZodType {\r\n    get schema() {\r\n        return this._def.getter();\r\n    }\r\n    _parse(input) {\r\n        const { ctx } = this._processInputParams(input);\r\n        const lazySchema = this._def.getter();\r\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\r\n    }\r\n}\r\nZodLazy.create = (getter, params) => {\r\n    return new ZodLazy({\r\n        getter: getter,\r\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodLiteral extends ZodType {\r\n    _parse(input) {\r\n        if (input.data !== this._def.value) {\r\n            const ctx = this._getOrReturnCtx(input);\r\n            addIssueToContext(ctx, {\r\n                received: ctx.data,\r\n                code: ZodIssueCode.invalid_literal,\r\n                expected: this._def.value,\r\n            });\r\n            return INVALID;\r\n        }\r\n        return { status: \"valid\", value: input.data };\r\n    }\r\n    get value() {\r\n        return this._def.value;\r\n    }\r\n}\r\nZodLiteral.create = (value, params) => {\r\n    return new ZodLiteral({\r\n        value: value,\r\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nfunction createZodEnum(values, params) {\r\n    return new ZodEnum({\r\n        values,\r\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\r\n        ...processCreateParams(params),\r\n    });\r\n}\r\nclass ZodEnum extends ZodType {\r\n    constructor() {\r\n        super(...arguments);\r\n        _ZodEnum_cache.set(this, void 0);\r\n    }\r\n    _parse(input) {\r\n        if (typeof input.data !== \"string\") {\r\n            const ctx = this._getOrReturnCtx(input);\r\n            const expectedValues = this._def.values;\r\n            addIssueToContext(ctx, {\r\n                expected: util.joinValues(expectedValues),\r\n                received: ctx.parsedType,\r\n                code: ZodIssueCode.invalid_type,\r\n            });\r\n            return INVALID;\r\n        }\r\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\")) {\r\n            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), \"f\");\r\n        }\r\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\").has(input.data)) {\r\n            const ctx = this._getOrReturnCtx(input);\r\n            const expectedValues = this._def.values;\r\n            addIssueToContext(ctx, {\r\n                received: ctx.data,\r\n                code: ZodIssueCode.invalid_enum_value,\r\n                options: expectedValues,\r\n            });\r\n            return INVALID;\r\n        }\r\n        return OK(input.data);\r\n    }\r\n    get options() {\r\n        return this._def.values;\r\n    }\r\n    get enum() {\r\n        const enumValues = {};\r\n        for (const val of this._def.values) {\r\n            enumValues[val] = val;\r\n        }\r\n        return enumValues;\r\n    }\r\n    get Values() {\r\n        const enumValues = {};\r\n        for (const val of this._def.values) {\r\n            enumValues[val] = val;\r\n        }\r\n        return enumValues;\r\n    }\r\n    get Enum() {\r\n        const enumValues = {};\r\n        for (const val of this._def.values) {\r\n            enumValues[val] = val;\r\n        }\r\n        return enumValues;\r\n    }\r\n    extract(values, newDef = this._def) {\r\n        return ZodEnum.create(values, {\r\n            ...this._def,\r\n            ...newDef,\r\n        });\r\n    }\r\n    exclude(values, newDef = this._def) {\r\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\r\n            ...this._def,\r\n            ...newDef,\r\n        });\r\n    }\r\n}\r\n_ZodEnum_cache = new WeakMap();\r\nZodEnum.create = createZodEnum;\r\nclass ZodNativeEnum extends ZodType {\r\n    constructor() {\r\n        super(...arguments);\r\n        _ZodNativeEnum_cache.set(this, void 0);\r\n    }\r\n    _parse(input) {\r\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\r\n        const ctx = this._getOrReturnCtx(input);\r\n        if (ctx.parsedType !== ZodParsedType.string &&\r\n            ctx.parsedType !== ZodParsedType.number) {\r\n            const expectedValues = util.objectValues(nativeEnumValues);\r\n            addIssueToContext(ctx, {\r\n                expected: util.joinValues(expectedValues),\r\n                received: ctx.parsedType,\r\n                code: ZodIssueCode.invalid_type,\r\n            });\r\n            return INVALID;\r\n        }\r\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\")) {\r\n            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), \"f\");\r\n        }\r\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\").has(input.data)) {\r\n            const expectedValues = util.objectValues(nativeEnumValues);\r\n            addIssueToContext(ctx, {\r\n                received: ctx.data,\r\n                code: ZodIssueCode.invalid_enum_value,\r\n                options: expectedValues,\r\n            });\r\n            return INVALID;\r\n        }\r\n        return OK(input.data);\r\n    }\r\n    get enum() {\r\n        return this._def.values;\r\n    }\r\n}\r\n_ZodNativeEnum_cache = new WeakMap();\r\nZodNativeEnum.create = (values, params) => {\r\n    return new ZodNativeEnum({\r\n        values: values,\r\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodPromise extends ZodType {\r\n    unwrap() {\r\n        return this._def.type;\r\n    }\r\n    _parse(input) {\r\n        const { ctx } = this._processInputParams(input);\r\n        if (ctx.parsedType !== ZodParsedType.promise &&\r\n            ctx.common.async === false) {\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.promise,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        const promisified = ctx.parsedType === ZodParsedType.promise\r\n            ? ctx.data\r\n            : Promise.resolve(ctx.data);\r\n        return OK(promisified.then((data) => {\r\n            return this._def.type.parseAsync(data, {\r\n                path: ctx.path,\r\n                errorMap: ctx.common.contextualErrorMap,\r\n            });\r\n        }));\r\n    }\r\n}\r\nZodPromise.create = (schema, params) => {\r\n    return new ZodPromise({\r\n        type: schema,\r\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodEffects extends ZodType {\r\n    innerType() {\r\n        return this._def.schema;\r\n    }\r\n    sourceType() {\r\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\r\n            ? this._def.schema.sourceType()\r\n            : this._def.schema;\r\n    }\r\n    _parse(input) {\r\n        const { status, ctx } = this._processInputParams(input);\r\n        const effect = this._def.effect || null;\r\n        const checkCtx = {\r\n            addIssue: (arg) => {\r\n                addIssueToContext(ctx, arg);\r\n                if (arg.fatal) {\r\n                    status.abort();\r\n                }\r\n                else {\r\n                    status.dirty();\r\n                }\r\n            },\r\n            get path() {\r\n                return ctx.path;\r\n            },\r\n        };\r\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\r\n        if (effect.type === \"preprocess\") {\r\n            const processed = effect.transform(ctx.data, checkCtx);\r\n            if (ctx.common.async) {\r\n                return Promise.resolve(processed).then(async (processed) => {\r\n                    if (status.value === \"aborted\")\r\n                        return INVALID;\r\n                    const result = await this._def.schema._parseAsync({\r\n                        data: processed,\r\n                        path: ctx.path,\r\n                        parent: ctx,\r\n                    });\r\n                    if (result.status === \"aborted\")\r\n                        return INVALID;\r\n                    if (result.status === \"dirty\")\r\n                        return DIRTY(result.value);\r\n                    if (status.value === \"dirty\")\r\n                        return DIRTY(result.value);\r\n                    return result;\r\n                });\r\n            }\r\n            else {\r\n                if (status.value === \"aborted\")\r\n                    return INVALID;\r\n                const result = this._def.schema._parseSync({\r\n                    data: processed,\r\n                    path: ctx.path,\r\n                    parent: ctx,\r\n                });\r\n                if (result.status === \"aborted\")\r\n                    return INVALID;\r\n                if (result.status === \"dirty\")\r\n                    return DIRTY(result.value);\r\n                if (status.value === \"dirty\")\r\n                    return DIRTY(result.value);\r\n                return result;\r\n            }\r\n        }\r\n        if (effect.type === \"refinement\") {\r\n            const executeRefinement = (acc) => {\r\n                const result = effect.refinement(acc, checkCtx);\r\n                if (ctx.common.async) {\r\n                    return Promise.resolve(result);\r\n                }\r\n                if (result instanceof Promise) {\r\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\r\n                }\r\n                return acc;\r\n            };\r\n            if (ctx.common.async === false) {\r\n                const inner = this._def.schema._parseSync({\r\n                    data: ctx.data,\r\n                    path: ctx.path,\r\n                    parent: ctx,\r\n                });\r\n                if (inner.status === \"aborted\")\r\n                    return INVALID;\r\n                if (inner.status === \"dirty\")\r\n                    status.dirty();\r\n                // return value is ignored\r\n                executeRefinement(inner.value);\r\n                return { status: status.value, value: inner.value };\r\n            }\r\n            else {\r\n                return this._def.schema\r\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\r\n                    .then((inner) => {\r\n                    if (inner.status === \"aborted\")\r\n                        return INVALID;\r\n                    if (inner.status === \"dirty\")\r\n                        status.dirty();\r\n                    return executeRefinement(inner.value).then(() => {\r\n                        return { status: status.value, value: inner.value };\r\n                    });\r\n                });\r\n            }\r\n        }\r\n        if (effect.type === \"transform\") {\r\n            if (ctx.common.async === false) {\r\n                const base = this._def.schema._parseSync({\r\n                    data: ctx.data,\r\n                    path: ctx.path,\r\n                    parent: ctx,\r\n                });\r\n                if (!isValid(base))\r\n                    return base;\r\n                const result = effect.transform(base.value, checkCtx);\r\n                if (result instanceof Promise) {\r\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\r\n                }\r\n                return { status: status.value, value: result };\r\n            }\r\n            else {\r\n                return this._def.schema\r\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\r\n                    .then((base) => {\r\n                    if (!isValid(base))\r\n                        return base;\r\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\r\n                });\r\n            }\r\n        }\r\n        util.assertNever(effect);\r\n    }\r\n}\r\nZodEffects.create = (schema, effect, params) => {\r\n    return new ZodEffects({\r\n        schema,\r\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\r\n        effect,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\r\n    return new ZodEffects({\r\n        schema,\r\n        effect: { type: \"preprocess\", transform: preprocess },\r\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodOptional extends ZodType {\r\n    _parse(input) {\r\n        const parsedType = this._getType(input);\r\n        if (parsedType === ZodParsedType.undefined) {\r\n            return OK(undefined);\r\n        }\r\n        return this._def.innerType._parse(input);\r\n    }\r\n    unwrap() {\r\n        return this._def.innerType;\r\n    }\r\n}\r\nZodOptional.create = (type, params) => {\r\n    return new ZodOptional({\r\n        innerType: type,\r\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodNullable extends ZodType {\r\n    _parse(input) {\r\n        const parsedType = this._getType(input);\r\n        if (parsedType === ZodParsedType.null) {\r\n            return OK(null);\r\n        }\r\n        return this._def.innerType._parse(input);\r\n    }\r\n    unwrap() {\r\n        return this._def.innerType;\r\n    }\r\n}\r\nZodNullable.create = (type, params) => {\r\n    return new ZodNullable({\r\n        innerType: type,\r\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodDefault extends ZodType {\r\n    _parse(input) {\r\n        const { ctx } = this._processInputParams(input);\r\n        let data = ctx.data;\r\n        if (ctx.parsedType === ZodParsedType.undefined) {\r\n            data = this._def.defaultValue();\r\n        }\r\n        return this._def.innerType._parse({\r\n            data,\r\n            path: ctx.path,\r\n            parent: ctx,\r\n        });\r\n    }\r\n    removeDefault() {\r\n        return this._def.innerType;\r\n    }\r\n}\r\nZodDefault.create = (type, params) => {\r\n    return new ZodDefault({\r\n        innerType: type,\r\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\r\n        defaultValue: typeof params.default === \"function\"\r\n            ? params.default\r\n            : () => params.default,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodCatch extends ZodType {\r\n    _parse(input) {\r\n        const { ctx } = this._processInputParams(input);\r\n        // newCtx is used to not collect issues from inner types in ctx\r\n        const newCtx = {\r\n            ...ctx,\r\n            common: {\r\n                ...ctx.common,\r\n                issues: [],\r\n            },\r\n        };\r\n        const result = this._def.innerType._parse({\r\n            data: newCtx.data,\r\n            path: newCtx.path,\r\n            parent: {\r\n                ...newCtx,\r\n            },\r\n        });\r\n        if (isAsync(result)) {\r\n            return result.then((result) => {\r\n                return {\r\n                    status: \"valid\",\r\n                    value: result.status === \"valid\"\r\n                        ? result.value\r\n                        : this._def.catchValue({\r\n                            get error() {\r\n                                return new ZodError(newCtx.common.issues);\r\n                            },\r\n                            input: newCtx.data,\r\n                        }),\r\n                };\r\n            });\r\n        }\r\n        else {\r\n            return {\r\n                status: \"valid\",\r\n                value: result.status === \"valid\"\r\n                    ? result.value\r\n                    : this._def.catchValue({\r\n                        get error() {\r\n                            return new ZodError(newCtx.common.issues);\r\n                        },\r\n                        input: newCtx.data,\r\n                    }),\r\n            };\r\n        }\r\n    }\r\n    removeCatch() {\r\n        return this._def.innerType;\r\n    }\r\n}\r\nZodCatch.create = (type, params) => {\r\n    return new ZodCatch({\r\n        innerType: type,\r\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\r\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nclass ZodNaN extends ZodType {\r\n    _parse(input) {\r\n        const parsedType = this._getType(input);\r\n        if (parsedType !== ZodParsedType.nan) {\r\n            const ctx = this._getOrReturnCtx(input);\r\n            addIssueToContext(ctx, {\r\n                code: ZodIssueCode.invalid_type,\r\n                expected: ZodParsedType.nan,\r\n                received: ctx.parsedType,\r\n            });\r\n            return INVALID;\r\n        }\r\n        return { status: \"valid\", value: input.data };\r\n    }\r\n}\r\nZodNaN.create = (params) => {\r\n    return new ZodNaN({\r\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nconst BRAND = Symbol(\"zod_brand\");\r\nclass ZodBranded extends ZodType {\r\n    _parse(input) {\r\n        const { ctx } = this._processInputParams(input);\r\n        const data = ctx.data;\r\n        return this._def.type._parse({\r\n            data,\r\n            path: ctx.path,\r\n            parent: ctx,\r\n        });\r\n    }\r\n    unwrap() {\r\n        return this._def.type;\r\n    }\r\n}\r\nclass ZodPipeline extends ZodType {\r\n    _parse(input) {\r\n        const { status, ctx } = this._processInputParams(input);\r\n        if (ctx.common.async) {\r\n            const handleAsync = async () => {\r\n                const inResult = await this._def.in._parseAsync({\r\n                    data: ctx.data,\r\n                    path: ctx.path,\r\n                    parent: ctx,\r\n                });\r\n                if (inResult.status === \"aborted\")\r\n                    return INVALID;\r\n                if (inResult.status === \"dirty\") {\r\n                    status.dirty();\r\n                    return DIRTY(inResult.value);\r\n                }\r\n                else {\r\n                    return this._def.out._parseAsync({\r\n                        data: inResult.value,\r\n                        path: ctx.path,\r\n                        parent: ctx,\r\n                    });\r\n                }\r\n            };\r\n            return handleAsync();\r\n        }\r\n        else {\r\n            const inResult = this._def.in._parseSync({\r\n                data: ctx.data,\r\n                path: ctx.path,\r\n                parent: ctx,\r\n            });\r\n            if (inResult.status === \"aborted\")\r\n                return INVALID;\r\n            if (inResult.status === \"dirty\") {\r\n                status.dirty();\r\n                return {\r\n                    status: \"dirty\",\r\n                    value: inResult.value,\r\n                };\r\n            }\r\n            else {\r\n                return this._def.out._parseSync({\r\n                    data: inResult.value,\r\n                    path: ctx.path,\r\n                    parent: ctx,\r\n                });\r\n            }\r\n        }\r\n    }\r\n    static create(a, b) {\r\n        return new ZodPipeline({\r\n            in: a,\r\n            out: b,\r\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\r\n        });\r\n    }\r\n}\r\nclass ZodReadonly extends ZodType {\r\n    _parse(input) {\r\n        const result = this._def.innerType._parse(input);\r\n        const freeze = (data) => {\r\n            if (isValid(data)) {\r\n                data.value = Object.freeze(data.value);\r\n            }\r\n            return data;\r\n        };\r\n        return isAsync(result)\r\n            ? result.then((data) => freeze(data))\r\n            : freeze(result);\r\n    }\r\n    unwrap() {\r\n        return this._def.innerType;\r\n    }\r\n}\r\nZodReadonly.create = (type, params) => {\r\n    return new ZodReadonly({\r\n        innerType: type,\r\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\r\n        ...processCreateParams(params),\r\n    });\r\n};\r\nfunction custom(check, params = {}, \r\n/**\r\n * @deprecated\r\n *\r\n * Pass `fatal` into the params object instead:\r\n *\r\n * ```ts\r\n * z.string().custom((val) => val.length > 5, { fatal: false })\r\n * ```\r\n *\r\n */\r\nfatal) {\r\n    if (check)\r\n        return ZodAny.create().superRefine((data, ctx) => {\r\n            var _a, _b;\r\n            if (!check(data)) {\r\n                const p = typeof params === \"function\"\r\n                    ? params(data)\r\n                    : typeof params === \"string\"\r\n                        ? { message: params }\r\n                        : params;\r\n                const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\r\n                const p2 = typeof p === \"string\" ? { message: p } : p;\r\n                ctx.addIssue({ code: \"custom\", ...p2, fatal: _fatal });\r\n            }\r\n        });\r\n    return ZodAny.create();\r\n}\r\nconst late = {\r\n    object: ZodObject.lazycreate,\r\n};\r\nvar ZodFirstPartyTypeKind;\r\n(function (ZodFirstPartyTypeKind) {\r\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\r\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\r\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\r\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\r\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\r\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\r\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\r\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\r\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\r\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\r\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\r\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\r\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\r\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\r\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\r\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\r\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\r\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\r\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\r\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\r\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\r\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\r\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\r\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\r\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\r\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\r\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\r\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\r\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\r\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\r\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\r\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\r\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\r\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\r\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\r\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\r\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\r\nconst instanceOfType = (\r\n// const instanceOfType = <T extends new (...args: any[]) => any>(\r\ncls, params = {\r\n    message: `Input not instance of ${cls.name}`,\r\n}) => custom((data) => data instanceof cls, params);\r\nconst stringType = ZodString.create;\r\nconst numberType = ZodNumber.create;\r\nconst nanType = ZodNaN.create;\r\nconst bigIntType = ZodBigInt.create;\r\nconst booleanType = ZodBoolean.create;\r\nconst dateType = ZodDate.create;\r\nconst symbolType = ZodSymbol.create;\r\nconst undefinedType = ZodUndefined.create;\r\nconst nullType = ZodNull.create;\r\nconst anyType = ZodAny.create;\r\nconst unknownType = ZodUnknown.create;\r\nconst neverType = ZodNever.create;\r\nconst voidType = ZodVoid.create;\r\nconst arrayType = ZodArray.create;\r\nconst objectType = ZodObject.create;\r\nconst strictObjectType = ZodObject.strictCreate;\r\nconst unionType = ZodUnion.create;\r\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\r\nconst intersectionType = ZodIntersection.create;\r\nconst tupleType = ZodTuple.create;\r\nconst recordType = ZodRecord.create;\r\nconst mapType = ZodMap.create;\r\nconst setType = ZodSet.create;\r\nconst functionType = ZodFunction.create;\r\nconst lazyType = ZodLazy.create;\r\nconst literalType = ZodLiteral.create;\r\nconst enumType = ZodEnum.create;\r\nconst nativeEnumType = ZodNativeEnum.create;\r\nconst promiseType = ZodPromise.create;\r\nconst effectsType = ZodEffects.create;\r\nconst optionalType = ZodOptional.create;\r\nconst nullableType = ZodNullable.create;\r\nconst preprocessType = ZodEffects.createWithPreprocess;\r\nconst pipelineType = ZodPipeline.create;\r\nconst ostring = () => stringType().optional();\r\nconst onumber = () => numberType().optional();\r\nconst oboolean = () => booleanType().optional();\r\nconst coerce = {\r\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\r\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\r\n    boolean: ((arg) => ZodBoolean.create({\r\n        ...arg,\r\n        coerce: true,\r\n    })),\r\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\r\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\r\n};\r\nconst NEVER = INVALID;\r\n\r\nvar z = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    defaultErrorMap: errorMap,\r\n    setErrorMap: setErrorMap,\r\n    getErrorMap: getErrorMap,\r\n    makeIssue: makeIssue,\r\n    EMPTY_PATH: EMPTY_PATH,\r\n    addIssueToContext: addIssueToContext,\r\n    ParseStatus: ParseStatus,\r\n    INVALID: INVALID,\r\n    DIRTY: DIRTY,\r\n    OK: OK,\r\n    isAborted: isAborted,\r\n    isDirty: isDirty,\r\n    isValid: isValid,\r\n    isAsync: isAsync,\r\n    get util () { return util; },\r\n    get objectUtil () { return objectUtil; },\r\n    ZodParsedType: ZodParsedType,\r\n    getParsedType: getParsedType,\r\n    ZodType: ZodType,\r\n    datetimeRegex: datetimeRegex,\r\n    ZodString: ZodString,\r\n    ZodNumber: ZodNumber,\r\n    ZodBigInt: ZodBigInt,\r\n    ZodBoolean: ZodBoolean,\r\n    ZodDate: ZodDate,\r\n    ZodSymbol: ZodSymbol,\r\n    ZodUndefined: ZodUndefined,\r\n    ZodNull: ZodNull,\r\n    ZodAny: ZodAny,\r\n    ZodUnknown: ZodUnknown,\r\n    ZodNever: ZodNever,\r\n    ZodVoid: ZodVoid,\r\n    ZodArray: ZodArray,\r\n    ZodObject: ZodObject,\r\n    ZodUnion: ZodUnion,\r\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\r\n    ZodIntersection: ZodIntersection,\r\n    ZodTuple: ZodTuple,\r\n    ZodRecord: ZodRecord,\r\n    ZodMap: ZodMap,\r\n    ZodSet: ZodSet,\r\n    ZodFunction: ZodFunction,\r\n    ZodLazy: ZodLazy,\r\n    ZodLiteral: ZodLiteral,\r\n    ZodEnum: ZodEnum,\r\n    ZodNativeEnum: ZodNativeEnum,\r\n    ZodPromise: ZodPromise,\r\n    ZodEffects: ZodEffects,\r\n    ZodTransformer: ZodEffects,\r\n    ZodOptional: ZodOptional,\r\n    ZodNullable: ZodNullable,\r\n    ZodDefault: ZodDefault,\r\n    ZodCatch: ZodCatch,\r\n    ZodNaN: ZodNaN,\r\n    BRAND: BRAND,\r\n    ZodBranded: ZodBranded,\r\n    ZodPipeline: ZodPipeline,\r\n    ZodReadonly: ZodReadonly,\r\n    custom: custom,\r\n    Schema: ZodType,\r\n    ZodSchema: ZodType,\r\n    late: late,\r\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\r\n    coerce: coerce,\r\n    any: anyType,\r\n    array: arrayType,\r\n    bigint: bigIntType,\r\n    boolean: booleanType,\r\n    date: dateType,\r\n    discriminatedUnion: discriminatedUnionType,\r\n    effect: effectsType,\r\n    'enum': enumType,\r\n    'function': functionType,\r\n    'instanceof': instanceOfType,\r\n    intersection: intersectionType,\r\n    lazy: lazyType,\r\n    literal: literalType,\r\n    map: mapType,\r\n    nan: nanType,\r\n    nativeEnum: nativeEnumType,\r\n    never: neverType,\r\n    'null': nullType,\r\n    nullable: nullableType,\r\n    number: numberType,\r\n    object: objectType,\r\n    oboolean: oboolean,\r\n    onumber: onumber,\r\n    optional: optionalType,\r\n    ostring: ostring,\r\n    pipeline: pipelineType,\r\n    preprocess: preprocessType,\r\n    promise: promiseType,\r\n    record: recordType,\r\n    set: setType,\r\n    strictObject: strictObjectType,\r\n    string: stringType,\r\n    symbol: symbolType,\r\n    transformer: effectsType,\r\n    tuple: tupleType,\r\n    'undefined': undefinedType,\r\n    union: unionType,\r\n    unknown: unknownType,\r\n    'void': voidType,\r\n    NEVER: NEVER,\r\n    ZodIssueCode: ZodIssueCode,\r\n    quotelessJson: quotelessJson,\r\n    ZodError: ZodError\r\n});\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zod/lib/index.mjs\n");

/***/ })

};
;